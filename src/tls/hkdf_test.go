package main

import (
	"bytes"
	"crypto/hmac"
	"crypto/sha256"
	"encoding/hex"
	"errors"
	"hash"
	"io"
	"log"
	"testing"
)

func TestHKDFExtract(t *testing.T) {
	secret := make([]byte, sha256.Size)
	got := Extract(sha256.New, secret, nil)
	want, err := hex.DecodeString("33ad0a1c607ec03b09e6cd9893680ce210adf300aa1f2660e1b22e10f170f92a")
	if err != nil {
		t.Fatal(err)
	}
	if !bytes.Equal(got, want) {
		t.Errorf("result mismatch, got=%x, want=%x", got, want)
	}
}

// Extract generates a pseudorandom key for use with Expand from an input secret
// and an optional independent salt.
//
// Only use this function if you need to reuse the extracted key with multiple
// Expand invocations and different context values. Most common scenarios,
// including the generation of multiple keys, should use New instead.
func Extract(hash func() hash.Hash, secret, salt []byte) []byte {
	if salt == nil {
		salt = make([]byte, hash().Size())
	}
	extractor := hmac.New(hash, salt)
	extractor.Write(secret)
	return extractor.Sum(nil)
}

type hkdf struct {
	expander hash.Hash
	size     int

	info    []byte
	counter byte

	prev []byte
	buf  []byte
}

func (f *hkdf) Read(p []byte) (int, error) {
	// Check whether enough data can be generated
	need := len(p)
	remains := len(f.buf) + int(255-f.counter+1)*f.size
	if remains < need {
		return 0, errors.New("hkdf: entropy limit reached")
	}
	// Read any leftover from the buffer
	n := copy(p, f.buf)
	p = p[n:]

	// Fill the rest of the buffer
	for len(p) > 0 {
		f.expander.Reset()
		f.expander.Write(f.prev)
		f.expander.Write(f.info)
		f.expander.Write([]byte{f.counter})
		f.prev = f.expander.Sum(f.prev[:0])
		log.Printf("counter=%d, prev=%x, len(prev)=%d", f.counter, f.prev, len(f.prev))
		f.counter++

		// Copy the new batch into p
		f.buf = f.prev
		n = copy(p, f.buf)
		p = p[n:]
	}
	// Save leftovers for next run
	f.buf = f.buf[n:]

	return need, nil
}

// Expand returns a Reader, from which keys can be read, using the given
// pseudorandom key and optional context info, skipping the extraction step.
//
// The pseudorandomKey should have been generated by Extract, or be a uniformly
// random or pseudorandom cryptographically strong key. See RFC 5869, Section
// 3.3. Most common scenarios will want to use New instead.
func Expand(hash func() hash.Hash, pseudorandomKey, info []byte) io.Reader {
	expander := hmac.New(hash, pseudorandomKey)
	log.Printf("expander.Size=%d", expander.Size())
	return &hkdf{expander, expander.Size(), info, 1, nil, nil}
}

func TestHKDFExpand(t *testing.T) {
	const length = 32
	out := make([]byte, length)
	secret := []byte("\x56\xbc\x08\x69\xe1\x4d\xd4\x00\xca\x53\x9f\x09\x04\x66\x62\xb8\x24\x63\x66\xf9\xfd\x41\xf4\x11\x80\xde\x07\xab\x5b\x50\x4c\x70")
	hkdfLabelBytes := []byte("\x00\x20\x12\x74\x6c\x73\x31\x33\x20\x63\x20\x68\x73\x20\x74\x72\x61\x66\x66\x69\x63\x20\x41\x44\x4f\x05\x04\x2e\x45\x58\xd3\x9c\x02\x0a\xb3\x49\x33\x08\x79\x75\x4b\xf8\x7a\xab\x30\x88\x3b\xa3\x70\xee\x2f\xad\x31\x2b")
	n, err := Expand(sha256.New, secret, hkdfLabelBytes).Read(out)
	if err != nil {
		t.Fatal(err)
	}
	if got, want := n, length; got != want {
		t.Errorf("read byte count mismatch, got=%d, want=%d", got, want)
	}
	if got, want := out, []byte("\x82\x05\x2b\xb2\x02\x21\xf4\x1b\x89\x5b\xd6\xb4\x9f\xd1\x67\x9f\xe8\x38\xde\x55\xc8\xab\x3f\x9c\x17\xc4\x50\x56\x15\xe9\x7b\x61"); !bytes.Equal(got, want) {
		t.Errorf("read bytes mismatch, got=%x, want=%x", got, want)
	}
}
