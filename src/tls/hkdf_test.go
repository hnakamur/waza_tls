package main

import (
	"bytes"
	"crypto/hmac"
	"crypto/sha256"
	"encoding/hex"
	"errors"
	"hash"
	"io"
	"log"
	"testing"
)

func TestHKDFExtract(t *testing.T) {
	secret := make([]byte, sha256.Size)
	got := Extract(sha256.New, secret, nil)
	want, err := hex.DecodeString("33ad0a1c607ec03b09e6cd9893680ce210adf300aa1f2660e1b22e10f170f92a")
	if err != nil {
		t.Fatal(err)
	}
	if !bytes.Equal(got, want) {
		t.Errorf("result mismatch, got=%x, want=%x", got, want)
	}
}

// Extract generates a pseudorandom key for use with Expand from an input secret
// and an optional independent salt.
//
// Only use this function if you need to reuse the extracted key with multiple
// Expand invocations and different context values. Most common scenarios,
// including the generation of multiple keys, should use New instead.
func Extract(hash func() hash.Hash, secret, salt []byte) []byte {
	if salt == nil {
		salt = make([]byte, hash().Size())
	}
	extractor := hmac.New(hash, salt)
	extractor.Write(secret)
	return extractor.Sum(nil)
}

type hkdf struct {
	expander hash.Hash
	size     int

	info    []byte
	counter byte

	prev []byte
	buf  []byte
}

func (f *hkdf) Read(p []byte) (int, error) {
	// Check whether enough data can be generated
	need := len(p)
	remains := len(f.buf) + int(255-f.counter+1)*f.size
	if remains < need {
		return 0, errors.New("hkdf: entropy limit reached")
	}
	// Read any leftover from the buffer
	n := copy(p, f.buf)
	p = p[n:]

	// Fill the rest of the buffer
	for len(p) > 0 {
		f.expander.Reset()
		f.expander.Write(f.prev)
		f.expander.Write(f.info)
		f.expander.Write([]byte{f.counter})
		f.prev = f.expander.Sum(f.prev[:0])
		log.Printf("counter=%d, prev=%x, len(prev)=%d", f.counter, f.prev, len(f.prev))
		f.counter++

		// Copy the new batch into p
		f.buf = f.prev
		n = copy(p, f.buf)
		p = p[n:]
	}
	// Save leftovers for next run
	f.buf = f.buf[n:]

	return need, nil
}

// Expand returns a Reader, from which keys can be read, using the given
// pseudorandom key and optional context info, skipping the extraction step.
//
// The pseudorandomKey should have been generated by Extract, or be a uniformly
// random or pseudorandom cryptographically strong key. See RFC 5869, Section
// 3.3. Most common scenarios will want to use New instead.
func Expand(hash func() hash.Hash, pseudorandomKey, info []byte) io.Reader {
	expander := hmac.New(hash, pseudorandomKey)
	log.Printf("expander.Size=%d", expander.Size())
	return &hkdf{expander, expander.Size(), info, 1, nil, nil}
}

func TestHKDFExpand(t *testing.T) {
	const length = 32
	out := make([]byte, length)
	secret := []byte("\x56\xbc\x08\x69\xe1\x4d\xd4\x00\xca\x53\x9f\x09\x04\x66\x62\xb8\x24\x63\x66\xf9\xfd\x41\xf4\x11\x80\xde\x07\xab\x5b\x50\x4c\x70")
	hkdfLabelBytes := []byte("\x00\x20\x12\x74\x6c\x73\x31\x33\x20\x63\x20\x68\x73\x20\x74\x72\x61\x66\x66\x69\x63\x20\x41\x44\x4f\x05\x04\x2e\x45\x58\xd3\x9c\x02\x0a\xb3\x49\x33\x08\x79\x75\x4b\xf8\x7a\xab\x30\x88\x3b\xa3\x70\xee\x2f\xad\x31\x2b")
	n, err := Expand(sha256.New, secret, hkdfLabelBytes).Read(out)
	if err != nil {
		t.Fatal(err)
	}
	if got, want := n, length; got != want {
		t.Errorf("read byte count mismatch, got=%d, want=%d", got, want)
	}
	if got, want := out, []byte("\x82\x05\x2b\xb2\x02\x21\xf4\x1b\x89\x5b\xd6\xb4\x9f\xd1\x67\x9f\xe8\x38\xde\x55\xc8\xab\x3f\x9c\x17\xc4\x50\x56\x15\xe9\x7b\x61"); !bytes.Equal(got, want) {
		t.Errorf("read bytes mismatch, got=%x, want=%x", got, want)
	}
}

// 2022/02/21 13:22:12 cipherSuiteTLS13.expandLabel start secret=33ad0a1c607ec03b09e6cd9893680ce210adf300aa1f2660e1b22e10f170f92a, label=derived, context=e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855, length=32                                                                                                                                                                                        2022/02/21 13:22:12 cipherSuiteTLS13.expandLabel hkdfLabelBytes=00200d746c733133206465726976656420e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855
// 2022/02/21 13:22:12 cipherSuiteTLS13.expandLabel out=6f2615a108c702c5678f54fc9dbab69716c076189c48250cebeac3576c3611ba
// 2022/02/21 13:22:12 cipherSuiteTLS13.expandLabel start secret=56bc0869e14dd400ca539f09046662b8246366f9fd41f41180de07ab5b504c70, label=c hs traffic, context=41444f05042e4558d39c020ab349330879754bf87aab30883ba370ee2fad312b, length=32
// 2022/02/21 13:22:12 cipherSuiteTLS13.expandLabel hkdfLabelBytes=002012746c733133206320687320747261666669632041444f05042e4558d39c020ab349330879754bf87aab30883ba370ee2fad312b
// 2022/02/21 13:22:12 cipherSuiteTLS13.expandLabel out=82052bb20221f41b895bd6b49fd1679fe838de55c8ab3f9c17c4505615e97b61
// 2022/02/21 13:22:12 cipherSuiteTLS13.expandLabel start secret=82052bb20221f41b895bd6b49fd1679fe838de55c8ab3f9c17c4505615e97b61, label=key, context=, length=16
// 2022/02/21 13:22:12 cipherSuiteTLS13.expandLabel hkdfLabelBytes=001009746c733133206b657900
// 2022/02/21 13:22:12 cipherSuiteTLS13.expandLabel out=f21166d1ddc51145647a8bed906583db
// 2022/02/21 13:22:12 cipherSuiteTLS13.expandLabel start secret=82052bb20221f41b895bd6b49fd1679fe838de55c8ab3f9c17c4505615e97b61, label=iv, context=, length=12
// 2022/02/21 13:22:12 cipherSuiteTLS13.expandLabel hkdfLabelBytes=000c08746c73313320697600
// 2022/02/21 13:22:12 cipherSuiteTLS13.expandLabel out=d3ef7f999316d5db7edd3aab
// 2022/02/21 13:22:12 cipherSuiteTLS13.expandLabel start secret=56bc0869e14dd400ca539f09046662b8246366f9fd41f41180de07ab5b504c70, label=s hs traffic, context=41444f05042e4558d39c020ab349330879754bf87aab30883ba370ee2fad312b, length=32
// 2022/02/21 13:22:12 cipherSuiteTLS13.expandLabel hkdfLabelBytes=002012746c733133207320687320747261666669632041444f05042e4558d39c020ab349330879754bf87aab30883ba370ee2fad312b
// 2022/02/21 13:22:12 cipherSuiteTLS13.expandLabel out=86979732b8cf8a4ba3f24c73d7788c9cfd29b103f94f2062b1dac345b3d0fbc3
// 2022/02/21 13:22:12 cipherSuiteTLS13.expandLabel start secret=86979732b8cf8a4ba3f24c73d7788c9cfd29b103f94f2062b1dac345b3d0fbc3, label=key, context=, length=16
// 2022/02/21 13:22:12 cipherSuiteTLS13.expandLabel hkdfLabelBytes=001009746c733133206b657900
// 2022/02/21 13:22:12 cipherSuiteTLS13.expandLabel out=7f7016ab96a8efb70e237a35de1d66dd
// 2022/02/21 13:22:12 cipherSuiteTLS13.expandLabel start secret=86979732b8cf8a4ba3f24c73d7788c9cfd29b103f94f2062b1dac345b3d0fbc3, label=iv, context=, length=12
// 2022/02/21 13:22:12 cipherSuiteTLS13.expandLabel hkdfLabelBytes=000c08746c73313320697600
// 2022/02/21 13:22:12 cipherSuiteTLS13.expandLabel out=1b9737266383bb32281c4bb9
// 2022/02/21 13:22:12 cipherSuiteTLS13.expandLabel start secret=86979732b8cf8a4ba3f24c73d7788c9cfd29b103f94f2062b1dac345b3d0fbc3, label=finished, context=, length=32
// 2022/02/21 13:22:12 cipherSuiteTLS13.expandLabel hkdfLabelBytes=00200e746c7331332066696e697368656400
// 2022/02/21 13:22:12 cipherSuiteTLS13.expandLabel out=180b3c83a6971d0671c91bfad831e43b6c8b005d5ca4067525af069fef74c4fc
// 2022/02/21 13:22:12 cipherSuiteTLS13.expandLabel start secret=56bc0869e14dd400ca539f09046662b8246366f9fd41f41180de07ab5b504c70, label=derived, context=e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855, length=32
// 2022/02/21 13:22:12 cipherSuiteTLS13.expandLabel hkdfLabelBytes=00200d746c733133206465726976656420e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855
// 2022/02/21 13:22:12 cipherSuiteTLS13.expandLabel out=ee42c7c29c7af739898bbc4824458f2b00b6d46fb463f30350aeff333a39b592
// 2022/02/21 13:22:12 cipherSuiteTLS13.expandLabel start secret=973a40a79df1b01a918b2bdf891cc45eea93166b29aec61e625d13e22c111aa2, label=c ap traffic, context=87847eb330398e7eba444b6d3d287423517342e36155fbb782acba4d717877fa, length=32
// 2022/02/21 13:22:12 cipherSuiteTLS13.expandLabel hkdfLabelBytes=002012746c733133206320617020747261666669632087847eb330398e7eba444b6d3d287423517342e36155fbb782acba4d717877fa
// 2022/02/21 13:22:12 cipherSuiteTLS13.expandLabel out=54459d9c753fef287930467f00cf2399877337f454699b2e70c774352489d551
// 2022/02/21 13:22:12 cipherSuiteTLS13.expandLabel start secret=973a40a79df1b01a918b2bdf891cc45eea93166b29aec61e625d13e22c111aa2, label=s ap traffic, context=87847eb330398e7eba444b6d3d287423517342e36155fbb782acba4d717877fa, length=32
// 2022/02/21 13:22:12 cipherSuiteTLS13.expandLabel hkdfLabelBytes=002012746c733133207320617020747261666669632087847eb330398e7eba444b6d3d287423517342e36155fbb782acba4d717877fa
// 2022/02/21 13:22:12 cipherSuiteTLS13.expandLabel out=3a37a2e8f60a54579c77a906f44fa7a88562beabc166989fc52589e0b694eb3a
// 2022/02/21 13:22:12 cipherSuiteTLS13.expandLabel start secret=3a37a2e8f60a54579c77a906f44fa7a88562beabc166989fc52589e0b694eb3a, label=key, context=, length=16
// 2022/02/21 13:22:12 cipherSuiteTLS13.expandLabel hkdfLabelBytes=001009746c733133206b657900
// 2022/02/21 13:22:12 cipherSuiteTLS13.expandLabel out=2a02cfb032b91aeba2626511ab462fb9
// 2022/02/21 13:22:12 cipherSuiteTLS13.expandLabel start secret=3a37a2e8f60a54579c77a906f44fa7a88562beabc166989fc52589e0b694eb3a, label=iv, context=, length=12
// 2022/02/21 13:22:12 cipherSuiteTLS13.expandLabel hkdfLabelBytes=000c08746c73313320697600
// 2022/02/21 13:22:12 cipherSuiteTLS13.expandLabel out=4784e0a20dcc0f86e93108c9
// 2022/02/21 13:22:12 cipherSuiteTLS13.expandLabel start secret=973a40a79df1b01a918b2bdf891cc45eea93166b29aec61e625d13e22c111aa2, label=exp master, context=87847eb330398e7eba444b6d3d287423517342e36155fbb782acba4d717877fa, length=32
// 2022/02/21 13:22:12 cipherSuiteTLS13.expandLabel hkdfLabelBytes=002010746c73313320657870206d61737465722087847eb330398e7eba444b6d3d287423517342e36155fbb782acba4d717877fa
// 2022/02/21 13:22:12 cipherSuiteTLS13.expandLabel out=a60a91724bf565b63ba9c36a624136570b2e0eb7a74e9d75e2d363d7f37384ac
// 2022/02/21 13:22:12 cipherSuiteTLS13.expandLabel start secret=82052bb20221f41b895bd6b49fd1679fe838de55c8ab3f9c17c4505615e97b61, label=finished, context=, length=32
// 2022/02/21 13:22:12 cipherSuiteTLS13.expandLabel hkdfLabelBytes=00200e746c7331332066696e697368656400
// 2022/02/21 13:22:12 cipherSuiteTLS13.expandLabel out=e07a06c3950efd3112e40f43d9e758efa7e9454bb36637e76001b73fdaa41eb6
// 2022/02/21 13:22:12 cipherSuiteTLS13.expandLabel start secret=54459d9c753fef287930467f00cf2399877337f454699b2e70c774352489d551, label=key, context=, length=16
// 2022/02/21 13:22:12 cipherSuiteTLS13.expandLabel hkdfLabelBytes=001009746c733133206b657900
// 2022/02/21 13:22:12 cipherSuiteTLS13.expandLabel out=31defa8aba59bae3c8f2436b33bec0f6
// 2022/02/21 13:22:12 cipherSuiteTLS13.expandLabel start secret=54459d9c753fef287930467f00cf2399877337f454699b2e70c774352489d551, label=iv, context=, length=12
// 2022/02/21 13:22:12 cipherSuiteTLS13.expandLabel hkdfLabelBytes=000c08746c73313320697600
// 2022/02/21 13:22:12 cipherSuiteTLS13.expandLabel out=5ee24a3df8adab9f10a8828e
