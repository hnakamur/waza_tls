const std = @import("std");
const assert = std.debug.assert;
const builtin = @import("builtin");
const mem = std.mem;
const CipherSuiteId = @import("handshake_msg.zig").CipherSuiteId;
const ProtocolVersion = @import("handshake_msg.zig").ProtocolVersion;
const KeyAgreement = @import("key_agreement.zig").KeyAgreement;
const RsaKeyAgreement = @import("key_agreement.zig").RsaKeyAgreement;
const EcdheKeyAgreement = @import("key_agreement.zig").EcdheKeyAgreement;
const HashType = @import("auth.zig").HashType;
const crypto = @import("crypto.zig");
const hkdf = @import("hkdf.zig");
const memx = @import("../memx.zig");

// Keep in sync with Zig standard library lib/std/crypto/aes.zig
const has_aesni = std.Target.x86.featureSetHas(builtin.cpu.features, .aes);
const has_avx = std.Target.x86.featureSetHas(builtin.cpu.features, .avx);
const has_armaes = std.Target.aarch64.featureSetHas(builtin.cpu.features, .aes);

pub const has_aes_gcm_hardware_support =
    (builtin.cpu.arch == .x86_64 and has_aesni and has_avx) or
    (builtin.cpu.arch == .aarch64 and has_armaes);

pub const aes_gcm_ciphers = [_]CipherSuiteId{
    // TLS 1.2
    .tls_ecdhe_rsa_with_aes_128_gcm_sha256,
    .tls_ecdhe_rsa_with_aes_256_gcm_sha384,
    .tls_ecdhe_ecdsa_with_aes_128_gcm_sha256,
    .tls_ecdhe_ecdsa_with_aes_256_gcm_sha384,
    // TLS 1.3
    .tls_aes_128_gcm_sha256,
    .tls_aes_256_gcm_sha384,
};

pub const non_aes_gcm_ciphers = [_]CipherSuiteId{
    // TLS 1.2
    .tls_ecdhe_rsa_with_chacha20_poly1305_sha256,
    .tls_ecdhe_ecdsa_with_chacha20_poly1305_sha256,
    // TLS 1.3
    .tls_chacha20_poly1305_sha256,
};

// aesgcmPreferred returns whether the first known cipher in the preference list
// is an AES-GCM cipher, implying the peer has hardware support for it.
pub fn aesgcmPreferred(ciphers: []const CipherSuiteId) bool {
    for (ciphers) |cipher_id| {
        if (cipherSuiteTls12ById(cipher_id)) |_| {
            return true;
        }
        if (cipherSuiteTls13ById(cipher_id)) |_| {
            return true;
        }
    }
    return false;
}

pub const CipherSuite = union(ProtocolVersion) {
    v1_3: CipherSuiteTls13,
    v1_2: CipherSuiteTls12,
    v1_1: void,
    v1_0: void,
};

// A cipherSuiteTLS13 defines only the pair of the AEAD algorithm and hash
// algorithm to be used with HKDF. See RFC 8446, Appendix B.4.
pub const CipherSuiteTls13 = struct {
    id: CipherSuiteId,
    key_len: usize,
    aead: fn (key: []const u8, fixed_nonce: []const u8) Aead,
    hash_type: HashType,

    // expandLabel implements HKDF-Expand-Label from RFC 8446, Section 7.1.
    fn expandLabel(
        self: *const CipherSuiteTls13,
        allocator: mem.Allocator,
        secret: []const u8,
        label: []const u8,
        context: []const u8,
        length: u16,
    ) ![]const u8 {
        _ = self;
        std.log.debug("expandLabel start, secret={}, label={s}, context={}, length={}", .{
            std.fmt.fmtSliceHexLower(secret),
            label,
            std.fmt.fmtSliceHexLower(context),
            length,
        });
        const tls13_prefix_label = "tls13 ";
        const tls13_and_label_len = tls13_prefix_label.len + label.len;
        const capacity = @sizeOf(u16) + @sizeOf(u8) + tls13_and_label_len +
            @sizeOf(u8) + context.len;

        var hkdf_label = blk: {
            var buf = try std.ArrayListUnmanaged(u8).initCapacity(allocator, capacity);
            errdefer buf.deinit(allocator);
            var writer = buf.writer(allocator);
            try writer.writeIntBig(u16, length);
            try writer.writeIntBig(u8, @intCast(u8, tls13_and_label_len));
            try writer.writeAll(tls13_prefix_label);
            try writer.writeAll(label);
            try writer.writeIntBig(u8, @intCast(u8, context.len));
            try writer.writeAll(context);
            break :blk buf.toOwnedSlice(allocator);
        };
        defer allocator.free(hkdf_label);

        var got_err: bool = false;
        var n: usize = undefined;
        var out = try allocator.alloc(u8, length);
        errdefer allocator.free(out);
        switch (self.hash_type) {
            .sha256 => {
                var hdkf_reader = hkdf.Hkdf(std.crypto.hash.sha2.Sha256).expand(secret, hkdf_label);
                if (hdkf_reader.read(out)) |n2| {
                    n = n2;
                } else |_| {
                    got_err = true;
                }
            },
            .sha384 => {
                var hdkf_reader = hkdf.Hkdf(std.crypto.hash.sha2.Sha384).expand(secret, hkdf_label);
                if (hdkf_reader.read(out)) |n2| {
                    n = n2;
                } else |_| {
                    got_err = true;
                }
            },
            else => @panic("unsupported hash_type"),
        }
        if (got_err or n != length) {
            @panic("tls: HKDF-Expand-Label invocation failed unexpectedly");
        }
        return out;
    }

    // deriveSecret implements Derive-Secret from RFC 8446, Section 7.1.
    pub fn deriveSecret(
        self: *const CipherSuiteTls13,
        allocator: mem.Allocator,
        secret: []const u8,
        label: []const u8,
        transcript: ?crypto.Hash,
    ) ![]const u8 {
        var ts = transcript orelse crypto.Hash.init(self.hash_type);
        var context = try ts.allocFinal(allocator);
        defer allocator.free(context);
        return self.expandLabel(
            allocator,
            secret,
            label,
            context,
            @intCast(u16, self.hash_type.digestLength()),
        );
    }

    // extract implements HKDF-Extract with the cipher suite hash.
    pub fn extract(
        self: *const CipherSuiteTls13,
        allocator: mem.Allocator,
        new_secret: ?[]const u8,
        current_secret: ?[]const u8,
    ) ![]const u8 {
        var new_secret2 = new_secret orelse blk: {
            var s = try allocator.alloc(u8, self.hash_type.digestLength());
            mem.set(u8, s, 0);
            break :blk s;
        };
        defer if (new_secret == null) allocator.free(new_secret2);

        return try hkdf.extract(self.hash_type, allocator, new_secret2, current_secret);
    }

    // trafficKey generates traffic keys according to RFC 8446, Section 7.3.
    pub fn trafficKey(
        self: *const CipherSuiteTls13,
        allocator: mem.Allocator,
        traffic_secret: []const u8,
        key_out: *[]const u8,
        iv_out: *[]const u8,
    ) !void {
        key_out.* = try self.expandLabel(
            allocator,
            traffic_secret,
            "key",
            "",
            @intCast(u16, self.key_len),
        );
        errdefer allocator.free(key_out.*);
        iv_out.* = try self.expandLabel(allocator, traffic_secret, "iv", "", aead_nonce_length);
        errdefer allocator.free(iv_out.*);
    }

    // finishedHash generates the Finished verify_data or PskBinderEntry according
    // to RFC 8446, Section 4.4.4. See sections 4.4 and 4.2.11.2 for the baseKey
    // selection.
    pub fn finishedHash(
        self: *const CipherSuiteTls13,
        allocator: mem.Allocator,
        base_key: []const u8,
        transcript: crypto.Hash,
    ) ![]const u8 {
        var finished_key = try self.expandLabel(
            allocator,
            base_key,
            "finished",
            "",
            @intCast(u16, self.hash_type.digestLength()),
        );
        defer allocator.free(finished_key);

        const transcript_sum = try transcript.allocFinal(allocator);
        defer allocator.free(transcript_sum);

        var ret = try allocator.alloc(u8, self.hash_type.digestLength());
        switch (self.hash_type) {
            .sha256 => {
                const HmacSha256 = std.crypto.auth.hmac.sha2.HmacSha256;
                HmacSha256.create(ret[0..HmacSha256.mac_length], transcript_sum, finished_key);
            },
            .sha384 => {
                const HmacSha384 = std.crypto.auth.hmac.sha2.HmacSha384;
                HmacSha384.create(ret[0..HmacSha384.mac_length], transcript_sum, finished_key);
            },
            else => @panic("unsupported hash_type for TLS 1.3"),
        }
        return ret;
    }
};

test "CipherSuiteTls13.expandLabel" {
    testing.log_level = .err;
    const test_cases = [_]struct {
        secret: []const u8,
        label: []const u8,
        context: []const u8,
        length: u16,
        want: []const u8,
    }{
        .{
            .secret = "\x56\xbc\x08\x69\xe1\x4d\xd4\x00\xca\x53\x9f\x09\x04\x66\x62\xb8\x24\x63\x66\xf9\xfd\x41\xf4\x11\x80\xde\x07\xab\x5b\x50\x4c\x70",
            .label = "c hs traffic",
            .context = "\x41\x44\x4f\x05\x04\x2e\x45\x58\xd3\x9c\x02\x0a\xb3\x49\x33\x08\x79\x75\x4b\xf8\x7a\xab\x30\x88\x3b\xa3\x70\xee\x2f\xad\x31\x2b",
            .length = 32,
            .want = "\x82\x05\x2b\xb2\x02\x21\xf4\x1b\x89\x5b\xd6\xb4\x9f\xd1\x67\x9f\xe8\x38\xde\x55\xc8\xab\x3f\x9c\x17\xc4\x50\x56\x15\xe9\x7b\x61",
        },
        .{
            .secret = "\x82\x05\x2b\xb2\x02\x21\xf4\x1b\x89\x5b\xd6\xb4\x9f\xd1\x67\x9f\xe8\x38\xde\x55\xc8\xab\x3f\x9c\x17\xc4\x50\x56\x15\xe9\x7b\x61",
            .label = "key",
            .context = "",
            .length = 16,
            .want = "\xf2\x11\x66\xd1\xdd\xc5\x11\x45\x64\x7a\x8b\xed\x90\x65\x83\xdb",
        },
        .{
            .secret = "\x82\x05\x2b\xb2\x02\x21\xf4\x1b\x89\x5b\xd6\xb4\x9f\xd1\x67\x9f\xe8\x38\xde\x55\xc8\xab\x3f\x9c\x17\xc4\x50\x56\x15\xe9\x7b\x61",
            .label = "iv",
            .context = "",
            .length = 12,
            .want = "\xd3\xef\x7f\x99\x93\x16\xd5\xdb\x7e\xdd\x3a\xab",
        },
    };
    for (test_cases) |c| {
        const allocator = testing.allocator;
        var suite = cipherSuiteTls13ById(.tls_aes_128_gcm_sha256).?;
        var got = try suite.expandLabel(allocator, c.secret, c.label, c.context, c.length);
        defer allocator.free(got);
        try testing.expectEqualSlices(u8, c.want, got);
    }
}

test "CipherSuiteTls13.extract" {
    testing.log_level = .err;
    const f = struct {
        fn f(
            new_secret: ?[]const u8,
            current_secret: ?[]const u8,
            want: []const u8,
        ) !void {
            const allocator = testing.allocator;
            var suite = cipherSuiteTls13ById(.tls_aes_128_gcm_sha256).?;
            var got = try suite.extract(allocator, new_secret, current_secret);
            defer allocator.free(got);
            try testing.expectEqualSlices(u8, want, got);
        }
    }.f;

    try f(
        null,
        null,
        "\x33\xad\x0a\x1c\x60\x7e\xc0\x3b\x09\xe6\xcd\x98\x93\x68\x0c\xe2\x10\xad\xf3\x00\xaa\x1f\x26\x60\xe1\xb2\x2e\x10\xf1\x70\xf9\x2a",
    );
    try f(
        "\x0b\x03\x4d\x80\x1b\x3d\x39\x9c\xbc\xb6\x10\x78\x44\xb0\xf9\x1e\xff\x99\x8b\x64\xa3\x39\xcb\x21\x72\x43\x74\x26\x93\x47\x92\x38",
        "\x6f\x26\x15\xa1\x08\xc7\x02\xc5\x67\x8f\x54\xfc\x9d\xba\xb6\x97\x16\xc0\x76\x18\x9c\x48\x25\x0c\xeb\xea\xc3\x57\x6c\x36\x11\xba",
        "\x57\x55\x23\xbb\xcc\x5b\x2c\x05\xc4\x14\x7b\xe6\x4f\x5d\x4a\xbe\x49\x8b\xd5\x3a\x96\xa4\xfb\xa1\xad\xfd\x47\x58\x53\x48\xf4\xc1",
    );
    try f(
        null,
        "\xb6\x00\xae\x09\x4c\x43\x9d\xcd\x01\xb1\xff\x96\x58\x85\x6d\xe8\x72\x4e\x3f\x45\xc0\x66\x56\xe8\xe3\xdd\x20\x87\xf4\x98\x7d\xf8",
        "\xe2\x68\x30\xf9\xc9\xef\x5a\x62\x60\x09\xac\xa2\xec\x93\x38\xdc\xa9\x37\xa1\xca\xdb\x70\x65\x8f\x78\x4b\x29\xa9\x51\x9c\x8f\x9e",
    );
}

test "hmacsha256" {
    testing.log_level = .err;
    const HmacSha256 = std.crypto.auth.hmac.sha2.HmacSha256;
    var out: [HmacSha256.mac_length]u8 = undefined;
    const msg = &[_]u8{0} ** HmacSha256.mac_length;
    const key = &[_]u8{0} ** HmacSha256.mac_length;
    HmacSha256.create(&out, msg, key);
    const want = "\x33\xad\x0a\x1c\x60\x7e\xc0\x3b\x09\xe6\xcd\x98\x93\x68\x0c\xe2\x10\xad\xf3\x00\xaa\x1f\x26\x60\xe1\xb2\x2e\x10\xf1\x70\xf9\x2a";
    try testing.expectEqualSlices(u8, want, &out);
}

const cipher_suites_tls13 = [_]CipherSuiteTls13{
    .{
        .id = .tls_aes_128_gcm_sha256,
        .key_len = 16,
        .aead = Aead.initXorNonceAeadAes128Gcm,
        .hash_type = .sha256,
    },
    .{
        .id = .tls_chacha20_poly1305_sha256,
        .key_len = 32,
        .aead = Aead.initXorNonceAeadChaCha20Poly1305,
        .hash_type = .sha256,
    },
    .{
        .id = .tls_aes_256_gcm_sha384,
        .key_len = 32,
        .aead = Aead.initXorNonceAeadAes256Gcm,
        .hash_type = .sha384,
    },
};

pub fn mutualCipherSuiteTls13(
    have: []const CipherSuiteId,
    want: CipherSuiteId,
) ?*const CipherSuiteTls13 {
    return if (memx.containsScalar(CipherSuiteId, have, want)) cipherSuiteTls13ById(want) else null;
}

pub fn cipherSuiteTls13ById(id: CipherSuiteId) ?*const CipherSuiteTls13 {
    for (cipher_suites_tls13) |*suite| {
        if (suite.id == id) {
            return suite;
        }
    }
    return null;
}

// defaultCipherSuitesTLS13 is also the preference order, since there are no
// disabled by default TLS 1.3 cipher suites. The same AES vs ChaCha20 logic as
// cipherSuitesPreferenceOrder applies.
pub const default_cipher_suites_tls13 = [_]CipherSuiteId{
    .tls_aes_128_gcm_sha256,
    .tls_aes_256_gcm_sha384,
    .tls_chacha20_poly1305_sha256,
};

pub const default_cipher_suites_tls13_no_aes = [_]CipherSuiteId{
    .tls_chacha20_poly1305_sha256,
    .tls_aes_128_gcm_sha256,
    .tls_aes_256_gcm_sha384,
};

pub const CipherSuiteTls12 = struct {
    pub const Flags = packed struct {
        ecdhe: bool = false,
        ec_sign: bool = false,
        tls12: bool = false,
        sha384: bool = false,
    };

    id: CipherSuiteId,
    // the lengths, in bytes, of the key material needed for each component.
    key_len: usize,
    mac_len: usize,
    iv_len: usize,

    flags: Flags = .{},
    ka: fn (version: ProtocolVersion) KeyAgreement,
    aead: ?fn (key: []const u8, nonce_prefix: []const u8) Aead,
};

pub const default_cipher_suites = cipher_suites_preference_order;

pub const cipher_suites_preference_order = [_]CipherSuiteId{
    .tls_ecdhe_ecdsa_with_aes_128_gcm_sha256,
    .tls_ecdhe_rsa_with_aes_128_gcm_sha256,
    .tls_ecdhe_ecdsa_with_aes_256_gcm_sha384,
    .tls_ecdhe_rsa_with_aes_256_gcm_sha384,
    .tls_ecdhe_ecdsa_with_chacha20_poly1305_sha256,
    .tls_ecdhe_rsa_with_chacha20_poly1305_sha256,
};

pub const cipher_suites_preference_order_no_aes = [_]CipherSuiteId{
    .tls_ecdhe_ecdsa_with_chacha20_poly1305_sha256,
    .tls_ecdhe_rsa_with_chacha20_poly1305_sha256,
    .tls_ecdhe_ecdsa_with_aes_128_gcm_sha256,
    .tls_ecdhe_rsa_with_aes_128_gcm_sha256,
    .tls_ecdhe_ecdsa_with_aes_256_gcm_sha384,
    .tls_ecdhe_rsa_with_aes_256_gcm_sha384,
};

pub const cipher_suites_tls12 = [_]CipherSuiteTls12{
    .{
        .id = .tls_ecdhe_rsa_with_chacha20_poly1305_sha256,
        .key_len = 32,
        .mac_len = 0,
        .iv_len = 12,
        .flags = .{ .ecdhe = true, .tls12 = true },
        .ka = ecdheRsaKa,
        .aead = Aead.initXorNonceAeadChaCha20Poly1305,
    },
    .{
        .id = .tls_ecdhe_ecdsa_with_chacha20_poly1305_sha256,
        .key_len = 32,
        .mac_len = 0,
        .iv_len = 12,
        .flags = .{ .ecdhe = true, .ec_sign = true, .tls12 = true },
        .ka = ecdheEcdsaKa,
        .aead = Aead.initXorNonceAeadChaCha20Poly1305,
    },
    .{
        .id = .tls_ecdhe_ecdsa_with_aes_128_gcm_sha256,
        .key_len = 16,
        .mac_len = 0,
        .iv_len = 4,
        .flags = .{ .ecdhe = true, .ec_sign = true, .tls12 = true },
        .ka = ecdheEcdsaKa,
        .aead = Aead.initPrefixNonceAeadAes128Gcm,
    },
    .{
        .id = .tls_ecdhe_rsa_with_aes_128_gcm_sha256,
        .key_len = 16,
        .mac_len = 0,
        .iv_len = 4,
        .flags = .{ .ecdhe = true, .tls12 = true },
        .ka = ecdheRsaKa,
        .aead = Aead.initPrefixNonceAeadAes128Gcm,
    },
    .{
        .id = .tls_ecdhe_ecdsa_with_aes_256_gcm_sha384,
        .key_len = 32,
        .mac_len = 0,
        .iv_len = 4,
        .flags = .{ .ecdhe = true, .ec_sign = true, .tls12 = true, .sha384 = true },
        .ka = ecdheEcdsaKa,
        .aead = Aead.initPrefixNonceAeadAes256Gcm,
    },
    .{
        .id = .tls_ecdhe_rsa_with_aes_256_gcm_sha384,
        .key_len = 32,
        .mac_len = 0,
        .iv_len = 4,
        .flags = .{ .ecdhe = true, .tls12 = true, .sha384 = true },
        .ka = ecdheRsaKa,
        .aead = Aead.initPrefixNonceAeadAes256Gcm,
    },
};

fn rsaKa(_: ProtocolVersion) KeyAgreement {
    return .{ .rsa = RsaKeyAgreement{} };
}

fn ecdheEcdsaKa(version: ProtocolVersion) KeyAgreement {
    return .{ .ecdhe = EcdheKeyAgreement{ .is_rsa = false, .version = version } };
}

fn ecdheRsaKa(version: ProtocolVersion) KeyAgreement {
    return .{ .ecdhe = EcdheKeyAgreement{ .is_rsa = true, .version = version } };
}

pub fn makeCipherPreferenceList(
    allocator: mem.Allocator,
    max_supported_version: ProtocolVersion,
    config_cipher_suites: []const CipherSuiteId,
) ![]const CipherSuiteId {
    var cipher_suites = try std.ArrayListUnmanaged(CipherSuiteId).initCapacity(
        allocator,
        config_cipher_suites.len,
    );
    errdefer cipher_suites.deinit(allocator);

    const preference_order = if (has_aes_gcm_hardware_support)
        &cipher_suites_preference_order
    else
        &cipher_suites_preference_order_no_aes;
    for (preference_order) |suite_id| {
        if (mutualCipherSuiteTls12(config_cipher_suites, suite_id)) |_| {
            try cipher_suites.append(allocator, suite_id);
        }
    }

    if (max_supported_version == .v1_3) {
        const suite_tls13 = if (has_aes_gcm_hardware_support)
            &default_cipher_suites_tls13
        else
            &default_cipher_suites_tls13_no_aes;
        try cipher_suites.appendSlice(allocator, suite_tls13);
    }

    return cipher_suites.toOwnedSlice(allocator);
}

pub fn mutualCipherSuiteTls12(
    have: []const CipherSuiteId,
    want: CipherSuiteId,
) ?*const CipherSuiteTls12 {
    return if (memx.containsScalar(CipherSuiteId, have, want)) cipherSuiteTls12ById(want) else null;
}

// selectCipherSuiteTls12 returns the first TLS 1.0–1.2 cipher suite from ids which
// is also in supportedIDs and passes the ok filter.
pub fn selectCipherSuiteTls12(
    ids: []const CipherSuiteId,
    supported_ids: []const CipherSuiteId,
    context: anytype,
    ok: fn (@TypeOf(context), *const CipherSuiteTls12) bool,
) ?*const CipherSuiteTls12 {
    for (ids) |id| {
        if (cipherSuiteTls12ById(id)) |candidate| {
            if (!ok(context, candidate)) {
                continue;
            }

            if (memx.containsScalar(CipherSuiteId, supported_ids, id)) {
                return candidate;
            }
        }
    }
    return null;
}

pub fn cipherSuiteTls12ById(id: CipherSuiteId) ?*const CipherSuiteTls12 {
    for (cipher_suites_tls12) |*suite| {
        if (suite.id == id) {
            return suite;
        }
    }
    return null;
}

pub const Aead = union(enum) {
    prefix_nonce_aead_aes128_gcm: PrefixNonceAeadAes128Gcm,
    prefix_nonce_aead_aes256_gcm: PrefixNonceAeadAes256Gcm,
    xor_nonce_aead_aes128_gcm: XorNonceAeadAes128Gcm,
    xor_nonce_aead_aes256_gcm: XorNonceAeadAes256Gcm,
    xor_nonce_aead_cha_cha20_poly1305: XorNonceAeadChaCha20Poly1305,

    pub fn initPrefixNonceAeadAes128Gcm(key: []const u8, nonce_prefix: []const u8) Aead {
        return .{
            .prefix_nonce_aead_aes128_gcm = PrefixNonceAeadAes128Gcm.init(key, nonce_prefix),
        };
    }

    pub fn initPrefixNonceAeadAes256Gcm(key: []const u8, nonce_prefix: []const u8) Aead {
        return .{
            .prefix_nonce_aead_aes256_gcm = PrefixNonceAeadAes256Gcm.init(key, nonce_prefix),
        };
    }

    pub fn initXorNonceAeadAes128Gcm(key: []const u8, nonce_mask: []const u8) Aead {
        return .{
            .xor_nonce_aead_aes128_gcm = XorNonceAeadAes128Gcm.init(key, nonce_mask),
        };
    }

    pub fn initXorNonceAeadAes256Gcm(key: []const u8, nonce_mask: []const u8) Aead {
        return .{
            .xor_nonce_aead_aes256_gcm = XorNonceAeadAes256Gcm.init(key, nonce_mask),
        };
    }

    pub fn initXorNonceAeadChaCha20Poly1305(key: []const u8, nonce_mask: []const u8) Aead {
        return .{
            .xor_nonce_aead_cha_cha20_poly1305 = XorNonceAeadChaCha20Poly1305.init(key, nonce_mask),
        };
    }

    pub fn explicitNonceLen(self: *const Aead) usize {
        return switch (self.*) {
            .prefix_nonce_aead_aes128_gcm => PrefixNonceAeadAes128Gcm.explicit_nonce_length,
            .prefix_nonce_aead_aes256_gcm => PrefixNonceAeadAes256Gcm.explicit_nonce_length,
            .xor_nonce_aead_aes128_gcm => XorNonceAeadAes128Gcm.explicit_nonce_length,
            .xor_nonce_aead_aes256_gcm => XorNonceAeadAes256Gcm.explicit_nonce_length,
            .xor_nonce_aead_cha_cha20_poly1305 => XorNonceAeadChaCha20Poly1305.explicit_nonce_length,
        };
    }

    pub fn overhead(self: *const Aead) usize {
        return switch (self.*) {
            .prefix_nonce_aead_aes128_gcm => PrefixNonceAeadAes128Gcm.tag_length,
            .prefix_nonce_aead_aes256_gcm => PrefixNonceAeadAes256Gcm.tag_length,
            .xor_nonce_aead_aes128_gcm => XorNonceAeadAes128Gcm.tag_length,
            .xor_nonce_aead_aes256_gcm => XorNonceAeadAes256Gcm.tag_length,
            .xor_nonce_aead_cha_cha20_poly1305 => XorNonceAeadChaCha20Poly1305.tag_length,
        };
    }

    pub fn encrypt(
        self: *Aead,
        allocator: mem.Allocator,
        dest: *std.ArrayListUnmanaged(u8),
        nonce: []const u8,
        plaintext: []const u8,
        additional_data: []const u8,
    ) !void {
        switch (self.*) {
            .prefix_nonce_aead_aes128_gcm => |*c| try c.encrypt(
                allocator,
                dest,
                nonce,
                plaintext,
                additional_data,
            ),
            .prefix_nonce_aead_aes256_gcm => |*c| try c.encrypt(
                allocator,
                dest,
                nonce,
                plaintext,
                additional_data,
            ),
            .xor_nonce_aead_aes128_gcm => |*c| try c.encrypt(
                allocator,
                dest,
                nonce,
                plaintext,
                additional_data,
            ),
            .xor_nonce_aead_aes256_gcm => |*c| try c.encrypt(
                allocator,
                dest,
                nonce,
                plaintext,
                additional_data,
            ),
            .xor_nonce_aead_cha_cha20_poly1305 => |*c| try c.encrypt(
                allocator,
                dest,
                nonce,
                plaintext,
                additional_data,
            ),
        }
    }

    pub fn decrypt(
        self: *Aead,
        allocator: mem.Allocator,
        dest: *std.ArrayListUnmanaged(u8),
        nonce: []const u8,
        chiphertext_and_tag: []const u8,
        additional_data: []const u8,
    ) !void {
        switch (self.*) {
            .prefix_nonce_aead_aes128_gcm => |*c| try c.decrypt(
                allocator,
                dest,
                nonce,
                chiphertext_and_tag,
                additional_data,
            ),
            .prefix_nonce_aead_aes256_gcm => |*c| try c.decrypt(
                allocator,
                dest,
                nonce,
                chiphertext_and_tag,
                additional_data,
            ),
            .xor_nonce_aead_aes128_gcm => |*c| try c.decrypt(
                allocator,
                dest,
                nonce,
                chiphertext_and_tag,
                additional_data,
            ),
            .xor_nonce_aead_aes256_gcm => |*c| try c.decrypt(
                allocator,
                dest,
                nonce,
                chiphertext_and_tag,
                additional_data,
            ),
            .xor_nonce_aead_cha_cha20_poly1305 => |*c| try c.decrypt(
                allocator,
                dest,
                nonce,
                chiphertext_and_tag,
                additional_data,
            ),
        }
    }
};

const aead_nonce_length = 12;
pub const nonce_prefix_length = 4;

pub const PrefixNonceAeadAes128Gcm = PrefixNonceAead(std.crypto.aead.aes_gcm.Aes128Gcm);
pub const PrefixNonceAeadAes256Gcm = PrefixNonceAead(std.crypto.aead.aes_gcm.Aes256Gcm);

// prefixNonceAEAD wraps an AEAD and prefixes a fixed portion of the nonce to
// each call.
fn PrefixNonceAead(comptime AesGcm: type) type {
    return struct {
        const Self = @This();
        pub const key_length = AesGcm.key_length;
        pub const tag_length = AesGcm.tag_length;
        pub const nonce_length = aead_nonce_length - nonce_prefix_length;
        pub const explicit_nonce_length = aead_nonce_length - nonce_prefix_length;

        // nonce contains the fixed part of the nonce in the first four bytes.
        nonce: [aead_nonce_length]u8 = [_]u8{0} ** aead_nonce_length,
        key: [key_length]u8,

        pub fn init(key: []const u8, nonce_prefix: []const u8) Self {
            assert(key.len == key_length);
            assert(nonce_prefix.len == nonce_prefix_length);
            var self = Self{ .key = key[0..key_length].* };
            mem.copy(u8, &self.nonce, nonce_prefix[0..]);
            return self;
        }

        pub fn encrypt(
            self: *Self,
            allocator: mem.Allocator,
            dest: *std.ArrayListUnmanaged(u8),
            nonce: []const u8,
            plaintext: []const u8,
            additional_data: []const u8,
        ) !void {
            assert(nonce.len == explicit_nonce_length);

            // Note: we have to copy explicit_nonce before resizing dest
            // because HalfConn.encrypt put nonce in dest.items.
            // After resizing dest, accessing nonce's data causes a segment fault
            // if dest.items.ptr is changed.
            var explicit_nonce: [explicit_nonce_length]u8 = undefined;
            mem.copy(u8, &explicit_nonce, nonce);

            const old_len = dest.items.len;
            const tag_start = old_len + plaintext.len;
            const new_len = tag_start + tag_length;
            try dest.resize(allocator, new_len);
            self.doEncrypt(
                dest.items[old_len..tag_start],
                dest.items[tag_start..new_len][0..tag_length],
                plaintext,
                additional_data,
                explicit_nonce,
            );
        }

        fn doEncrypt(
            self: *Self,
            out_ciphertext: []u8,
            out_tag: *[tag_length]u8,
            plaintext: []const u8,
            additional_data: []const u8,
            explicit_nonce: [explicit_nonce_length]u8,
        ) void {
            mem.copy(u8, self.nonce[nonce_prefix_length..], &explicit_nonce);
            AesGcm.encrypt(
                out_ciphertext,
                out_tag,
                plaintext,
                additional_data,
                self.nonce,
                self.key,
            );
        }

        pub fn decrypt(
            self: *Self,
            allocator: mem.Allocator,
            dest: *std.ArrayListUnmanaged(u8),
            nonce: []const u8,
            chiphertext_and_tag: []const u8,
            additional_data: []const u8,
        ) !void {
            assert(nonce.len == explicit_nonce_length);
            assert(chiphertext_and_tag.len >= tag_length);
            const old_len = dest.items.len;
            const ciphertext_len = chiphertext_and_tag.len - tag_length;
            const new_len = old_len + ciphertext_len;
            try dest.ensureTotalCapacityPrecise(allocator, new_len);
            dest.expandToCapacity();
            try self.doDecrypt(
                dest.items[old_len..new_len],
                chiphertext_and_tag[0..ciphertext_len],
                chiphertext_and_tag[ciphertext_len..][0..tag_length].*,
                additional_data,
                nonce[0..explicit_nonce_length].*,
            );
        }

        pub fn doDecrypt(
            self: *Self,
            out_plaintext: []u8,
            ciphertext: []const u8,
            tag: [tag_length]u8,
            additional_data: []const u8,
            explicit_nonce: [explicit_nonce_length]u8,
        ) !void {
            mem.copy(u8, self.nonce[nonce_prefix_length..], &explicit_nonce);
            try AesGcm.decrypt(
                out_plaintext,
                ciphertext,
                tag,
                additional_data,
                self.nonce,
                self.key,
            );
        }

        pub fn format(
            self: Self,
            comptime fmt: []const u8,
            options: std.fmt.FormatOptions,
            writer: anytype,
        ) !void {
            _ = fmt;
            _ = options;
            try std.fmt.format(writer, "{s}{{ .nonce = {}, .key = {} }}", .{
                @typeName(Self),
                std.fmt.fmtSliceHexLower(&self.nonce),
                std.fmt.fmtSliceHexLower(&self.key),
            });
        }
    };
}

pub const XorNonceAeadAes128Gcm = XorNonceAead(std.crypto.aead.aes_gcm.Aes128Gcm);
pub const XorNonceAeadAes256Gcm = XorNonceAead(std.crypto.aead.aes_gcm.Aes256Gcm);
pub const XorNonceAeadChaCha20Poly1305 = XorNonceAead(std.crypto.aead.chacha_poly.ChaCha20Poly1305);

// XorNonceAEAD wraps an AEAD by XORing in a fixed pattern to the nonce
// before each call.
fn XorNonceAead(comptime InnerAead: type) type {
    return struct {
        const Self = @This();
        pub const key_length = InnerAead.key_length;
        pub const tag_length = InnerAead.tag_length;
        pub const nonce_length = 8; // 64-bit sequence number
        pub const explicit_nonce_length = 0;

        nonce_mask: [aead_nonce_length]u8,
        key: [key_length]u8,

        pub fn init(key: []const u8, nonce_mask: []const u8) Self {
            assert(key.len == key_length);
            assert(nonce_mask.len == aead_nonce_length);
            return .{
                .key = key[0..key_length].*,
                .nonce_mask = nonce_mask[0..aead_nonce_length].*,
            };
        }

        pub fn encrypt(
            self: *Self,
            allocator: mem.Allocator,
            dest: *std.ArrayListUnmanaged(u8),
            nonce: []const u8,
            plaintext: []const u8,
            additional_data: []const u8,
        ) !void {
            assert(nonce.len == nonce_length);

            // Note: we have to copy nonce before resizing dest
            // because HalfConn.encrypt put nonce in dest.items.
            // After resizing dest, accessing nonce's data causes a segment fault
            // if dest.items.ptr is changed.
            var nonce_copy: [nonce_length]u8 = undefined;
            mem.copy(u8, &nonce_copy, nonce);

            const old_len = dest.items.len;
            const tag_start = old_len + plaintext.len;
            const new_len = tag_start + tag_length;
            try dest.resize(allocator, new_len);
            self.doEncrypt(
                dest.items[old_len..tag_start],
                dest.items[tag_start..new_len][0..tag_length],
                plaintext,
                additional_data,
                nonce_copy,
            );
        }

        fn doEncrypt(
            self: *Self,
            out_ciphertext: []u8,
            out_tag: *[tag_length]u8,
            plaintext: []const u8,
            additional_data: []const u8,
            nonce: [nonce_length]u8,
        ) void {
            self.updateNonceMask(nonce);
            InnerAead.encrypt(
                out_ciphertext,
                out_tag,
                plaintext,
                additional_data,
                self.nonce_mask,
                self.key,
            );
            self.updateNonceMask(nonce);
        }

        pub fn decrypt(
            self: *Self,
            allocator: mem.Allocator,
            dest: *std.ArrayListUnmanaged(u8),
            nonce: []const u8,
            chiphertext_and_tag: []const u8,
            additional_data: []const u8,
        ) !void {
            assert(nonce.len == nonce_length);
            assert(chiphertext_and_tag.len >= tag_length);
            const old_len = dest.items.len;
            const ciphertext_len = chiphertext_and_tag.len - tag_length;
            const new_len = old_len + ciphertext_len;
            try dest.resize(allocator, new_len);
            try self.doDecrypt(
                dest.items[old_len..new_len],
                chiphertext_and_tag[0..ciphertext_len],
                chiphertext_and_tag[ciphertext_len..][0..tag_length].*,
                additional_data,
                nonce[0..nonce_length].*,
            );
        }

        fn doDecrypt(
            self: *Self,
            out_plaintext: []u8,
            ciphertext: []const u8,
            tag: [tag_length]u8,
            additional_data: []const u8,
            nonce: [nonce_length]u8,
        ) !void {
            self.updateNonceMask(nonce);
            try InnerAead.decrypt(
                out_plaintext,
                ciphertext,
                tag,
                additional_data,
                self.nonce_mask,
                self.key,
            );
            self.updateNonceMask(nonce);
        }

        inline fn updateNonceMask(
            self: *Self,
            nonce: [nonce_length]u8,
        ) void {
            var i: usize = 0;
            while (i < nonce.len) : (i += 1) {
                self.nonce_mask[aead_nonce_length - nonce_length + i] ^= nonce[i];
            }
        }

        pub fn format(
            self: Self,
            comptime fmt: []const u8,
            options: std.fmt.FormatOptions,
            writer: anytype,
        ) !void {
            _ = fmt;
            _ = options;
            try std.fmt.format(writer, "{s}{{ .nonce_mask = {}, .key = {} }}", .{
                @typeName(Self),
                std.fmt.fmtSliceHexLower(&self.nonce_mask),
                std.fmt.fmtSliceHexLower(&self.key),
            });
        }
    };
}

const testing = std.testing;
const fmtx = @import("../fmtx.zig");

test "mutualCipherSuiteTls12" {
    const have = [_]CipherSuiteId{
        .tls_ecdhe_rsa_with_chacha20_poly1305_sha256,
        .tls_ecdhe_ecdsa_with_aes_256_gcm_sha384,
    };

    try testing.expectEqual(
        cipherSuiteTls12ById(.tls_ecdhe_ecdsa_with_aes_256_gcm_sha384),
        mutualCipherSuiteTls12(&have, .tls_ecdhe_ecdsa_with_aes_256_gcm_sha384),
    );

    try testing.expectEqual(
        @as(?*const CipherSuiteTls12, null),
        mutualCipherSuiteTls12(&have, .tls_aes_128_gcm_sha256),
    );
}

test "Aes128Gcm - Message and associated data" {
    const Aes128Gcm = std.crypto.aead.aes_gcm.Aes128Gcm;
    const key: [Aes128Gcm.key_length]u8 = [_]u8{'k'} ** Aes128Gcm.key_length;
    const nonce: [Aes128Gcm.nonce_length]u8 = [_]u8{'n'} ** Aes128Gcm.nonce_length;
    const m = "exampleplaintext";
    const ad = "additionaldata";
    var c: [m.len]u8 = undefined;
    var m2: [m.len]u8 = undefined;
    var tag: [Aes128Gcm.tag_length]u8 = undefined;

    Aes128Gcm.encrypt(&c, &tag, m, ad, nonce, key);
    try Aes128Gcm.decrypt(&m2, &c, tag, ad, nonce, key);
    try testing.expectEqualSlices(u8, m[0..], m2[0..]);

    try testing.expectEqualSlices(
        u8,
        "\x5e\x84\x2b\xcb\x73\x09\x9c\xcf\xdd\x8e\x7e\x27\x1c\x07\x14\xef",
        &c,
    );
    try testing.expectEqualSlices(
        u8,
        "\x74\xe2\xdf\xb3\x6e\x31\x90\x6f\xd5\xd1\x17\xd4\xa1\x7a\x14\x2d",
        &tag,
    );
}

test "PrefixNonceAeadAes128Gcm" {
    testing.log_level = .err;

    const allocator = testing.allocator;

    const key = [_]u8{'k'} ** PrefixNonceAeadAes128Gcm.key_length;
    const nonce_prefix = [_]u8{'p'} ** nonce_prefix_length;
    var aead = PrefixNonceAeadAes128Gcm.init(&key, &nonce_prefix);

    const m = "exampleplaintext";
    const ad = "additionaldata";
    const explicit_nonce = [_]u8{'n'} ** PrefixNonceAeadAes128Gcm.explicit_nonce_length;

    var c = std.ArrayListUnmanaged(u8){};
    defer c.deinit(allocator);
    try aead.encrypt(allocator, &c, &explicit_nonce, m, ad);
    try testing.expectEqualSlices(
        u8,
        "\x4b\x94\x1c\x11\x1c\xc9\xe9\xdb\x4d\xa6\xdb\xf7\x69\xda\x42\x81" ++
            "\x07\xb4\x8a\x4c\x64\xda\x24\x62\xfc\xbc\xab\xb7\xfd\x76\x5e\x62",
        c.items,
    );

    var m2 = std.ArrayListUnmanaged(u8){};
    defer m2.deinit(allocator);
    try aead.decrypt(allocator, &m2, &explicit_nonce, c.items, ad);
    try testing.expectEqualStrings(m, m2.items);
}

test "PrefixNonceAeadAes256Gcm" {
    testing.log_level = .err;

    const allocator = testing.allocator;

    const key = [_]u8{'k'} ** PrefixNonceAeadAes256Gcm.key_length;
    const nonce_prefix = [_]u8{'p'} ** nonce_prefix_length;
    var aead = PrefixNonceAeadAes256Gcm.init(&key, &nonce_prefix);

    const m = "exampleplaintext";
    const ad = "additionaldata";
    const explicit_nonce = [_]u8{'n'} ** PrefixNonceAeadAes256Gcm.explicit_nonce_length;

    var c = std.ArrayListUnmanaged(u8){};
    defer c.deinit(allocator);
    try aead.encrypt(allocator, &c, &explicit_nonce, m, ad);
    try testing.expectEqualSlices(
        u8,
        "\x1a\xd2\x36\x15\xdd\xe3\x47\xec\xa5\x7d\xf1\x73\xef\xe8\xfa\x10" ++
            "\x9d\x47\x5e\x0a\x47\x05\xcb\x51\xd3\xba\x47\x31\xe8\x79\xad\xb9",
        c.items,
    );

    var m2 = std.ArrayListUnmanaged(u8){};
    defer m2.deinit(allocator);
    try aead.decrypt(allocator, &m2, &explicit_nonce, c.items, ad);
    try testing.expectEqualStrings(m, m2.items);
}

test "XorNonceAeadAes128Gcm" {
    testing.log_level = .err;

    const allocator = testing.allocator;

    const key = [_]u8{'k'} ** XorNonceAeadAes128Gcm.key_length;
    const nonce_mask = [_]u8{'m'} ** aead_nonce_length;
    var aead = XorNonceAeadAes128Gcm.init(&key, &nonce_mask);

    const m = "exampleplaintext";
    const ad = "additionaldata";
    const nonce = [_]u8{'n'} ** XorNonceAeadAes128Gcm.nonce_length;

    var c = std.ArrayListUnmanaged(u8){};
    defer c.deinit(allocator);
    try aead.encrypt(allocator, &c, &nonce, m, ad);
    try testing.expectEqualSlices(
        u8,
        "\x58\x92\x14\xf9\x47\x1f\x36\xc4\x95\x25\xe3\x16\x45\xc5\xbe\x39" ++
            "\xbc\xfa\xd7\x22\x79\xe1\xff\x3f\xcb\x1a\x51\x0d\x92\x2b\xbd\x8f",
        c.items,
    );

    var m2 = std.ArrayListUnmanaged(u8){};
    defer m2.deinit(allocator);
    try aead.decrypt(allocator, &m2, &nonce, c.items, ad);
    try testing.expectEqualStrings(m, m2.items);
}

test "XorNonceAeadAes256Gcm" {
    testing.log_level = .err;

    const allocator = testing.allocator;

    const key = [_]u8{'k'} ** XorNonceAeadAes256Gcm.key_length;
    const nonce_mask = [_]u8{'m'} ** aead_nonce_length;
    var aead = XorNonceAeadAes256Gcm.init(&key, &nonce_mask);

    const m = "exampleplaintext";
    const ad = "additionaldata";
    const nonce = [_]u8{'n'} ** XorNonceAeadAes256Gcm.nonce_length;

    var c = std.ArrayListUnmanaged(u8){};
    defer c.deinit(allocator);
    try aead.encrypt(allocator, &c, &nonce, m, ad);
    try testing.expectEqualSlices(
        u8,
        "\x61\x91\xb6\x55\xb7\x04\x54\xbf\xf5\x94\x4e\x7d\xbd\x83\x6b\x84" ++
            "\x90\xcc\x27\x9a\xb8\x5d\x84\xf4\xcf\x67\x05\x27\x22\x27\xd4\x58",
        c.items,
    );

    var m2 = std.ArrayListUnmanaged(u8){};
    defer m2.deinit(allocator);
    try aead.decrypt(allocator, &m2, &nonce, c.items, ad);
    try testing.expectEqualStrings(m, m2.items);
}

test "XorNonceAeadChaCha20Poly1305" {
    testing.log_level = .err;

    const allocator = testing.allocator;

    const key = [_]u8{'k'} ** XorNonceAeadChaCha20Poly1305.key_length;
    const nonce_prefix = [_]u8{'m'} ** aead_nonce_length;
    var aead = XorNonceAeadChaCha20Poly1305.init(&key, &nonce_prefix);

    const m = "exampleplaintext";
    const ad = "additionaldata";
    const nonce = [_]u8{'n'} ** XorNonceAeadChaCha20Poly1305.nonce_length;

    var c = std.ArrayListUnmanaged(u8){};
    defer c.deinit(allocator);
    try aead.encrypt(allocator, &c, &nonce, m, ad);
    try testing.expectEqualSlices(
        u8,
        "\xdf\x39\x03\x0c\xb1\x2f\xe4\xf9\x24\xeb\x76\x15\x80\x4c\x40\xed" ++
            "\xd8\x1f\x15\x82\xfc\x6c\x15\x62\x12\x9c\x8f\x77\x77\x11\x91\x60",
        c.items,
    );

    var m2 = std.ArrayListUnmanaged(u8){};
    defer m2.deinit(allocator);
    try aead.decrypt(allocator, &m2, &nonce, c.items, ad);
    try testing.expectEqualStrings(m, m2.items);
}

test "AeadXorNonceAeadChaCha20Poly1305" {
    testing.log_level = .err;

    const allocator = testing.allocator;

    const key = [_]u8{'k'} ** XorNonceAeadChaCha20Poly1305.key_length;
    const nonce_prefix = [_]u8{'m'} ** aead_nonce_length;
    var aead = Aead.initXorNonceAeadChaCha20Poly1305(&key, &nonce_prefix);

    const m = "exampleplaintext";
    const ad = "additionaldata";
    const nonce = [_]u8{'n'} ** XorNonceAeadChaCha20Poly1305.nonce_length;

    var c = std.ArrayListUnmanaged(u8){};
    defer c.deinit(allocator);
    try aead.encrypt(allocator, &c, &nonce, m, ad);
    try testing.expectEqualSlices(
        u8,
        "\xdf\x39\x03\x0c\xb1\x2f\xe4\xf9\x24\xeb\x76\x15\x80\x4c\x40\xed" ++
            "\xd8\x1f\x15\x82\xfc\x6c\x15\x62\x12\x9c\x8f\x77\x77\x11\x91\x60",
        c.items,
    );

    var m2 = std.ArrayListUnmanaged(u8){};
    defer m2.deinit(allocator);
    try aead.decrypt(allocator, &m2, &nonce, c.items, ad);
    try testing.expectEqualStrings(m, m2.items);
}

test "tls_aes_128_gcm_sha256" {
    testing.log_level = .debug;

    const allocator = testing.allocator;
    var suite = cipherSuiteTls13ById(.tls_aes_128_gcm_sha256).?;
    const key = "\x1f\x30\xdc\x5b\xbf\x85\x0b\xee\xe4\x42\x60\xb0\x13\xc4\xab\x30";
    const nonce_mask = "\x27\x44\xc2\xa3\x9e\xcd\x81\xa8\xec\x1f\x4f\x8e";
    var aead = suite.aead(key, nonce_mask);

    var decrypted = std.ArrayListUnmanaged(u8){};
    defer decrypted.deinit(allocator);
    const nonce = "\x00\x00\x00\x00\x00\x00\x00\x01";
    const payload = "\xec\x6c\x57\xf1\xe6\xb0\x45\x93\x48\x55\xc4\x90\x1e\xd4\x76\xc1\xeb\x45\x4f\x19\x05\x5d\xe5\x5f\x7a\x34\x23\x26\x55\xf8\xc1\x1e\x0a\xf5\x2c\x59\xc5\xfb\x05\x75\x7e\x54\x68\x29\xf0\x29\x30\x43\x26\x90\x92\x3c\x39\x09\xfe\xa6\x8d\x2e\x76\x7b\xe7\x93\x4e\x16\xd7\x8c\xdf\x68\xca\x07\xb9\xe5\x1a\x69\xd3\x54\x21\x9d\xfd\x92\xeb\xbe\x4d\xdd\xd7\x61\x8e\x96\x6f\xc2\xb1\xc5\x73\xa4\x50\xce\x4a\x6c\x0f\x41\x65\xf4\x55\xf2\x6e\xc5\xe9\x91\xf3\x88\x47\xd4\xe6\x98\xb2\x28\x97\x1e\x7d\x28\xaa\xeb\x96\x0a\xa1\xea\xc1\x52\x75\x49\x69\x18\x81\x36\x4f\xa8\x88\x11\x9e\x55\x60\x8f\x37\xa3\x4d\x7c\x04\xf5\x4b\x60\xfe\x13\x8c\xd7\xbb\x83\xcf\xa1\xc6\x83\x00\x6e\x8b\x8b\x63\xe6\x9f\xfc\x39\x93\x6f\x8a\x3c\xfd\x58\x29\xfe\xdd\x44\x1d\x6c\x7e\xb6\xe2\xe5\x22\xd1\x7f\x60\x14\x4f\x46\xb1\x60\x89\xc6\x4c\xf6\xcb\x3a\xd8\x8d\xee\x29\xe4\xef\xb8\x02\xe0\x92\x6d\x35\x54\x6b\x76\x92\x79\x3c\xac\xbb\x19\x12\x75\xff\x40\x3a\x5d\xbb\x63\x3c\x91\x41\x68\x14\x86\x3f\xd1\x78\xff\x9a\xad\x3e\x68\xb2\x69\x28\x86\x6b\x6b\x71\x76\xb8\x3c\x01\x22\x7c\x50\x51\x78\xa9\x58\xa3\xce\x9f\xa1\x6c\xad\xa0\xba\xad\x96\xdc\x51\xde\x56\xdf\x5e\xbf\xd0\x20\x01\xd9\x3d\xde\x30\xbd\x52\x9a\x43\xd1\x33\x23\x27\x24\x2b\x1a\xa9\x59\xed\x83\xdd\xd3\x40\xb8\xdc\x51\x0b\x2b\xfd\xc5\x0d\x6e\xfa\x4d\xa1\x27\x85\x6a\xe4\x1f\x09\x8e\x92\x64\xd0\x67\x85\x65\x98\xd3\x9b\xc4\xd6\xa4\x4e\xac\x42\x2e\x98\xa9\xc2\x93\xb0\xc8\x49\x2d\xda\xa8\xb2\xaf\x19\x84\xc0\x73\x74\x3c\x6c\x3f\x68\xea\x61\x46\x73\x21\x8a\xe7\xe0\xe9\xc1\xb3\x91\xcc\x94\xac\x19\xf0\x15\xef\xe5\x8c\x23\x4d\x63\xff\xe5\x19\x0f\x7d\x76\xee\x94\xce\x13\xa9\x18\xbb\x32\x89\xf5\x99\x02\x28\x23\xc7\xb7\x29\x27\xbc\x5d\x1f\x20\xb5\x62\xf9\x53\xa9\x49\xb9\x5d\x08\xf3\x6a\x3b\x1f\x41\x6f\x01\x75\xcf\x73\xc9\x16\x4c\xc3\xc4\x41\xac\x14\x9a\xf9\x73\x3a\x82\x6d\x71\xb3\x15\x08\x1f\x5b\xb1\xd9\x12\x96\xbd\x00\x45\xc0\x94\x60\x62\x02\x1a\x4d\x9d\x66\x82\x43\x3d\xcb\xb0\x9c\xee\xc6\xaf\x13\x9a\x65\xc3\xd3\xdf\x6a\xce\x42\x50\x83\x66\x4f\xff\x33\xcc\x60\x17\x1c\xee\xea\x74\x95\xe5\x56\x1e\x02\x56\x55\x95\xd2\xee\xea\xf4\xbd\x9e\xd5\x2a\x8d\x78\x11\x01\x40\x94\x17\x15\x0b\xd5\x9a\x05\xfd\x9e\x64\xb6\x80\x88\x32\x0a\x0a\x3c\x06\x3d\x66\x32\xc7\x8c\x0f\xad\xd4\xc5\x94\x0d\xc3\xad\x5d\x59\x08\x45\xb7\xa8\xb2\xa7\xcf\x95\x0a\x40\x83\x90\xc0\x1f\xc4\xd4\x89\x14\x8e\x2a\xa8\x35\xbc\xc8\xe7\xf7\xcb\xf0\x1b\x81\xd1\x59\x4e\xe6\x9d\x3f\x3d\x07\x45\x60\x4d\x6a\x9b\xc1\x80\xb1\x82\x63\x69\xb5\xfc\xc0\xff\xd1\xbd\xeb\x8b\x65\xa7\xed\xd2\x51\x2d\x97\x7f\xe8\x3f\xb7\x04\xab\x3a\x17\x23\x31\xc4\xde\x70\x85\x10\x76\xd7\x11\x59\xb9\x50\x3f\xe9\xd6\x84\xbc\x29\x61\x0e\x9a\x0a\xf8\x81\x0f\x51\x07\x23\xdb\x9e\x70\x28\x1e\x82\xa0\x10\x63\x31\x80\xb6\xf7\x3a\x40\x36\x61\x2a\x56\xb2\x62\x5a\x9d\xac\x1e\x6e\x31\x7d\x88\xe3\x37\x1f\x20\x61\xca\x26\x00\xf8\x94\x2e\xfe\x92\x3c\xed\x97\xf2\xdd\xab\x16\xe6\xe1\x4d\xb7\xbe\x90\xcb\xee\x3d\x89\x12\xff\xd0\x75\x98\x6e\x0c\xf2\x2c\x8d\x5f\x3b\x00\x41\x34\x1d\xae\x29\xbc\x5a\x05\x64\x9f\xf2\xb8\x63\xc3\xc9\xa9\x4e\x83\x68\xa4\xca\x65\x89\xb8\xfb\x99\x81\xfd\xab\x3d\xf7\x5b\xe8\xee\xb5\x76\x98\xbf\x69\x99\x0d\x97\xab\xe0\x71\xa2\x2f\x36\xd4\x44\xef\x7c\x97\xad\x3b\x47\xa9\x43\x86\xdf\x9e\xbd\x23\xd6\x18\x38\x00\x0a\xbb\x06\x2e\x3d\x4a\xc7\x41\x9b\x5c\xfd\x06\xf7\x03\xa7\x19\x34\x2c\x21\xef\xf6\x85\x65\xbd\x76\x0a\xf8\x34\x31\x14\xa3\x57\x75\xe7\xff\x2c\x78\x93\xe0\xb9\x46\xec\x52\xf4\x77\xee\x97\x13\x45\x83\xe6\xdf\x43\x7f\x3a\x54\x9b\xa9\x35\xff\x60\x38\x10\x6f\xd7\xba\x8e\xfe\x8d\x49\xc0\x2d\x1b\x0a\xec\x93\xe6\xf9\xfb\xca\x28\xe8\x46\x81\xc8\x43\xba\x54\xb4\x76\x05\x86\xf9\xc6\x05\x6e\xeb\x14\xfb\x6c\x35\x1d\xef\xe8\xb7\xe7\x88\xa5\xb4\x35\xfe\x90\xf9\x7e\x85\x1e\x66\xfd\xb6\xd5\x9a\x50\xdc\x81\x8d\xd9\xbf\xae\x3e\x48\xae\x78\xf1\xae\x4e\x20\xaa\x96\x78\x1c\x90\xaa\x76\x90\x97\x47\x40\x4c\x98\x94\x08\x96\x74\x32\xf8\x57\x4d\x0c\x03\x99\xef\xdf\xe0\x5b\xe5\x3e\xeb\xad\x02\xcb\x6c\x44\xc9\x7b\x0a\xb0\x7e\x13\x2f\xde\x36\x6c\x7f\x8e\x8f\x27\xa0\x30\x3d\x1f\x2b\xde\x23\x40\xde\x7d\x61\xa1\x99\xc7\x27\x44\x3e\x78\xff\x42\x09\x1f\xe8\xc0\xea\x9d\x70\x88\xe1\x4b\x66\x86\x37\x6e\x1f\xb7\xb4\x9b\x7d\xfe\x14\xc7\x86\x68\xda\xc4\xa8\x62\x65\x09\xe6\x54\x37\x9b\xf0\xe2\x1a\x5b\xd9\x56\x20\x4e\x1b\x61\xce\xf8\xa3\xc6\x9b\xcc\x34\x20\xea\x8f\x4e\x88\x14\x2f\xb0\x96\xa0\x8f\x26\xe9\x1a\x2c\x26\x4d\x44\xff\x7b\x41\x00\x7d\xa1\x74\x26\x5a\x4a\x93\x72\x29\x40\xf5\xda\x0f\x6b\x98\x6e\x16\xb5\x54\x5c\x1e\xfe\xb8\x56\xea\x68\x36\x7a\x0a\xbe\x1c\xf4\x02\xad\x4a\x10\x98\xc2\xab\xde\xf8\x22\x16\x5e\x1e\x83\x30\x67\x63\x19\xe5\xbf\x68\xda\xa8\xe4\x92\x01\x95\xda\x4c\xba\x47\x0f\xae\x81\xd7\x03\xe3\x59\x5f\x73\x62\x13\x19\x13\xa8\xd3\xf0\xb9\x29\x08\xb1\xb2\xcf\xc6\xd5\xb5\x8e\x7b\x07\x3c\xf5\x90\x50\x60\x38\xe9\x65\x89\x97\x2f\x7b\x9a\xfa\xcf\x08\x9d\x0c\xb8\x3f\x15\xb5\x61\x97\xc4\x78\x7f\xb1\x79\xc1\x03\xc7\x51\xd7\xcc\x3f\xe2\xa3\x40\xc6\x4e\xbd\x87\xe2\x31\x22\x66\x2c\xc7\x03\xb3\xaf\x99\x81\xf4\x8e\x70\xeb\x68\xc9\x43\xee\x95\x0f\x72\xd5\x49\x8b\x1e\x14\xec\x5d\xb7\x26\x0d\x88\xb8\x76\xa2\x83\xd7\xcc\xbd\xe3\x00\x3b\x87\x07\x43\x76\xf0\x15\x0e\x3c\x6f\x2d\x01\xff\x48\xc1\xd2\x9d\x58\x8c\x1e\x85\x63\xee\x20\x6b\x40\xa6\x21\xed\xb5\xa4\x36\x48\x3d\x72\x00\xa5\x9d\x61\x99\xee\x81\xc7\x4d\x96\x07\x22\xc1\x77\x1e\x2a\x37\xb0\xdb\x66\xc6\x35\xa8\x48\xee\x20\x38\xcd\x19\x1a\xda\x74\x3a\xd7\xea\x1e\x6f\x9e\xa5\x92\x71\xdc\x8f\x5c\x9b\x32\x01\xf4\x96\x0a\x84\x79\x18\x7d\xc5\x67\x57\xec\xd0\xe5\xea\x74\x8b\x0f\x26\x4e\x6d\x85\xea\xa8\xb5\x8c\x56\xf5\xbf\x3e\xad\x3d\xc1\x9e\xb2\x35\x03\x98\x70\x14\x36\x1d\x05\x4a\xcd\x23\xf0\x58\x3e\xbb\xe3\x05\xe3\x94\xb5\x7c\x21\x45\x07\xf0\xde\x49\x86\xe5\x50\xac\xe2\xe8\x90\x99\xfa\x18\xad\x79\x2b\xfc\xe5\x1b\x53\x3d\x33\x3b\x67\xc5\x58\x09\x38\x36\x00\x03\xca\x97\x93\x1d\xe5\x74\xb2\xd8\x8a\x88\xe8\x01\x65\x9d\x32\x69\x7e\x50\x3a\x37\x48\xbb\x23\x03\x2b\x88\x1c\x86\xa7\x3a\xdd\x5f\xde\x51\x7a\xca\x4e\x89\x2a\x8e\xc6\x9a\xce\xa0\x1e\x4f\x2f\xdb\x81\x8e\xf8\x48\x14\xc0\x04\x67\x28\xf5\xec\x47\xba\x67\x2f\x8c\x01\x62\xb2\xc0\x7d\x1a\xaf\x38\x0b\x66\x49\x28\x82\x4f\x4c\x63\x2a\x48\x14\x1f\x93\xb0\x9c\x8f\x78\x43\xaf\x5e\x02\xc3\xf6\x8e\x1f\x1f\xbe\x78\x99\xc2\x1b\x07\x24\x35\x04\x26\x09\x82\x17\x90\xfe\xb5\x8a\x41\x41\x69\x5f\x58\x0b\xee\x47\xe9\xf5\x52\x4a\xcd\xb3\x0e\x1b\xe5\xca\xfa\x35\xb6\x6a\x0f\x20\x78\xfd\xec\xd7\xba\xcf\x19\xfd\xf7\x14\x70\x4b\xe3\xa9\x28\xe4\x4c\x6f\xec\x0d\xb1\x2f\xcf\xed\xd1\x9e\xdd\x31\x1c\xd8\x70\x6c\xd1\xdb\x40\xe6\xee\x10\x49\x9e\x23\xc7\xde\x71\x4c\x74\x1b\x49\x80\x5f\xb5\xa3\x8b\x0c\x1f\xfc\xf0\x56\xae\xb9\x9e\x50\x92\xc3\xc6\xea\x20\x2e\xf6\x87\x15\xaa\xb3\x51\x01\x40\xaf\xf6\x0d\xb7\xe7\x9f\x96\x85\xfa\x99\xab\x7b\xf7\x41\x49\xb3\x62\xcc\x6f\x9d\x33\x6e\xe6\x0a\x0f\x48\x61\x1a\xb1\x82\x58\x8e\x6d\x22\x5b\x53\xca\x91\x97\xd3\x87\xfe\xbd\x69\xaa\x2d\xa5\x47\x28\x14\xdf\x81\x29\xd8\x0c\xcd\xa1\xf8\x3d\xe4\x55\x8e\xa0\xaf\x18\xc1\x52\xa3\x29\x8c\x52\x13\xb0\xfa\x9b\xca\x2f\x1e\xab\xd6\x55\xd4\x6c\x11\xe9\x79\xf8\xef\xd5\x0c\xa3\xec\x88\xde\x78\x68\x16\x05\x9c\x16\x70\xd3\xdd\x73\x41\x1d\x37\x65\x15\x03\xa6\xc4\x98\x7a\x73\x4f\xf5\x67\x88\x5b\x95\x8f\xd8\x4e\x38\xed\x11\xaa\xef\xd1\x93\xa5\xd0\x71\x74\x12\xa9\x62\x98\x92\x2b\x67\x9c\xce\xeb\xae\x95\xda\xe4\x3c\xe2\x08\x47\x38\xff\x1f\xbc\x4f\x7e\xd3\xd7\x71\x43\x68\xe5\xf2\xef\xa4\x12\x04\x22\xca\xd5\x9a\x93\x13\xca\x1f\x21\x7f\x08\x12\xae\x49\xab\xd8\x8b\xaf\xa2\x50\x9e\xf8\x6f\xa7\x84\x58\xaa\x8c\xe7\x8b\xf5\x0d\x45\xf8\x8b\xf4\x32\xdf\x34\xc6\xb1\x19\x20\x17\x51\x3c\xe3\x34\xbb\x45\xba\x81\xe4\x57\x9b\x40\x13\x7a\xb3\xc4\xf9\x4e\x9d\xf9\x3d\xf6\x1c\x13\x97\x6c\x7e\xb7\xc4\xf7\x8f\x34\x28\xa0\x5d\x2e\x97\x05\x0c\x85\x5f\x56\x3f\x1c\xde\xef\xef\x1f\x17\x9c\x6c\x61\x0b\x3b\xf3\xe6\xb4\x9c\x64\xc8\xca\xbd\xef\x06\x90\xf7\x0a\x6f\xd9\xc0\xc1\xc9\x0e\x53\x80\x51\xf0\xc7\x30\xba\xa8\xf2\x18\x06\x23\xc6\x67\x20\xe9\xa3\x72\xed\x69\x52\xf7\x4e\x78\x16\xeb\x8c\x87\x20\x9b\x17\x9e\xb2\x72\x4a\x32\x89\xf4\xe1\x92\xe2\x5a\x16\x3a\x13\x34\x4d\x8a\xe2\xb1\x75\x83\x75\xa5\xa6\x6e\xce\x05\xf6\x37\x6e\x4a\x71\x68\x6e\x3c\x2c\xf2\x9c\x42\x22\xeb\x64\x4c\x7b\x73\x49\x6c\x48\xaa\x8c\x9c\x49\x22\x5c\x9c\xe1\x4f\x54\xfd\x42\xa5\x38\x68\x4b\xdc\x58\x14\xb1\xe7\xa1\x96\x5c\xcc\x12\x4b\xdf\x04\xed\x1f\x6e\x57\x9f\x12\xf1\x57\x2b\xb6\x0a\xa7\x7a\xf2\xba\x0e\xaf\xbd\x7b\x44\x1a\x96\xfb\x23\x71\x0c\x96\x4b\x88\x3e\xbe\x60\xb0\x46\x30\xa1\x85\x69\xdd\x4f\xb6\x6d\xc7\x15\x8c\xf2\x4e\x32\x86\x0f\xda\x46\xd4\xa6\x03\x36\x21\xed\x29\x0b\x41\xfc\x78\x8c\x82\xbc\x0e\x5f\x37\xba\xa8\xdf\x8d\xd8\xc8\xf9\x12\x58\xa3\x75\xbb\xec\xb3\x25\x4c\xc1\x7b\x58\x71\x3b\xc1\xe8\x60\x59\x37\x38\x68\x5c\x74\x24\x2f\x4f\x36\xf2\x90\x50\xae\xb8\x78\x5e\xa4\xb0\xf2\x50\x88\xad\x98\x91\x05\x13\x08\x38\x7b\x06\x35\x44\x6c\x15\x63\x68\x5d\xb4\x6e\x39\xe0\xcf\xc5\x49\x38\xf2\x09\x07\x86\x78\x46\x65\xb3\xae\x1e\xf9\xda\x1c\xa0\xa7\x5e\x3a\xf7\x25\x47\xbe\xf7\xe4\x0e\xc4\x16\x90\x8f\x0e\x17\xd6\xaa\xaa\xda\xd4\x75\xb8\x4f\xdf\xca\x21\xbe\x01\x55\x48\xa6\x0e\xa2\xa6\xd4\xde\x21\xe4\x8d\x47\xfe\x67\x00\x1a\x06\xe4\x05\x5c\xe7\x75\x77\x32\x9b\xb2\x51\xb6\xf7\x28\x75\x0b\xdf\x1f\x4d\xb9\xa1\xd2\x60\x52\x13\x55\x02\x92\xcf\xc0\x6b\x74\xf0\x3f\x70\x84\xa9\x2d\xf9\x80\x35\x50\xbd\x34\x48\xec\xca\xc4\xa6\xa7\xe2\xc5\xa0\xc4\x03\xa7\xf6\xeb\xaf\x59\xc8\x47\x88\xc4\x77\x4b\xaf\x6c\xc8\xed\x51\x54\x33\x5f\x43\x0c\x10\x88\x06\x7a\x08\x05\x1a\xd0\xc9\xa8\xe1\xc6\x8f\x8e\x82\x54\x42\xcf\x03\x8f\x8e\xd4\xab\xae\x39\x98\x6f\xf1\x5a\xef\x23\x82\x2a\xeb\xa6\x8c\x69\xe2\xa3\x00\x12\x62\x3d\x4e\xae\xe5\xa2\x17\x9d\x88\xbe\x37\x2b\xaf\x56\xd9\xa6\x59\x07\x90\xb7\x7a\xd7\x1f\xa9\xc6\x31\xd9\xde\xef\x89\xd9\x7e\xd3\xac\x16\xef\xfc\x69\x36\x2c\x30\xa2\x6c\xdf\x3d\x78\xd0\x27\xb9\xca\xb4\x10\xa7\x66\x70\xeb\xd4\x4f\x64\x00\x08\x31\x2d\xf9\xb6\xfd\x7e\x62\x79\x07\xe7\x85\x59\x60\x7e\x42\x6b\x04\x69\x8d\xe7\x78\x9b\x4a\x69\x2c\x17\xde\x53\x3e\x97\xd4\x59\xc1\x4f\x86\x71\x2e\x08\x76\xbf\xc8\xcf\x38\x8e\x03\x24\x67\x0f\x56\x49\x98\x69\x6b\xef\xc7\xda\x95\x46\x73\xf7\x77\x25\xb5\x98\xe2\x2d\x79\x83\x78\x29\xcf\xa4\x08\xd0\xcc\xe1\x23\x55\x07\x2c\xec\x85\x12\xae\x79\x83\xc5\xfd\xbc\xc3\xc7\x26\x8c\x12\x61\x0a\x44\x97\x3a\xa4\xdd\xc9\x6c\xc3\xf4\x2c\xb1\xc6\x8d\xfc\xb3\x4f\xd6\xbf\x56\x90\xbf\x4a\x02\xfd\x34\x5d\xcc\x82\xd4\xcc\xc2\x86\x49\x79\x1f\x95\x32\x65\x79\x7a\x88\xe9\x8c\x5f\x6b\xc2\x22\xad\xdd\x8f\x36\xfe\x2e\x2c\xb0\x91\x96\x21\x79\xb0\xe4\x44\xc7\x6a\x88\x2d\x32\xa0\x68\x2f\xe4\x33\x60\xe3\xe8\xc3\xa0\xc6\x9e\x05\x95\x1c\x68\x00\x05\xe3\x55\xa8\xce\x25\xff\xa2\xe2\x91\xc6\xd5\xe2\x69\x75\x02\x09\x56\xb7\x1a\x75\x76\x02\x08\x68\x6b\x8e\x8b\xa4\x68\x11\x66\x71\xad\x9c\x48\x85\xff\xdb\x0f\xb6\x5b\xce\x29\x47\x8b\x6f\x6b\xe7\xf9\x7c\xc7\xd3\x8b\x3d\x8f\xd4\xec\xf3\x88\x4b\xcc\xeb\x18\x7c\xc2\xb8\x1e\xc2\x5c\xe4\xff\x92\xed\x1d\x11\x49\x77\x84\xe0\x81\xf3\x64\x35\xdc\x92\xe7\x75\xa2\x6e\x35\xe2\xe8\x17\x87\xce\x30\xb6\x70\x33\x5b\x6e\x40\xce\x2a\x8f\x03\x05\x53\x49\xa0\x59\x40\x8c\x72\x95\x4f\x91\x97\x97\xb1\x3f\x73\xa0\xe4\xcc\xf4\xab\x6a\x7b\x2a\x6a\x55\x4f\xc7\x76\x12\x01\x26\x04\x78\x5d\xd0\x13\x72\xf2\xbd\x0e\x61\xfd\xaf\xe3\xbc\x5c\xdf\x09\x8a\x8c\x88\x08\x15\x06\xc3\x59\xb4\xf8\x5f\x26\xdc\xbd\x35\x17\xd2\x5a\xbd\x01\x83\xef\x9b\xbd\x56\x31\xb2\x48\x41\xa0\xf5\x90\x6b\xd2\x28\x0c\xa1\x76\xf5\x65\xa6\xdf\x66\x24\xee\xad\xb0\xd7\x52\xbd\x41\x15\x4c\x30\xd9\x60\x39\x29\xa4\xe3\x4f\xcc\x5a\xf6\x2e\xcb\x3b\xc8\xc0\x59\x37\x71\x37\x07\xf5\x97\xdf\xce\xd6\x59\x65\x8e\x47\x08\x60\x83\x03\x9f\x80\x64\x2d\xe3\x78\x69\x44\x19\x3d\x9e\x5b\x39\x91\x6e\x41\x37\x1a\x48\xaf\xef\xd3\xfb\xc3\x37\x59\x26\x6f\xbc\x94\x81\xcb\x24\xec\x55\xa6\x81\x2d\x30\x5b\xaa\x5e\xcf\x30\x7a\x1d\xbe\x1c\x5a\x66\x3b\x33\xa3\x87\x24\x0f\x4a\xf5\x63\x86\xaa\xc3\x44\x2d\xad\x5b\xd7\xd1\x2d\xde\x58\x20\xa7\xc4\x9d\xf0\x71\x95\xc3\x71\xf9\x1e\xbc\x2c\x56\xc8\xc7\x29\x86\xb9\xbe\x55\x3f\x9a\x74\x40\x0b\x5d\x2b\xd0\xcd\xab\x9b\x03\xa5\xdf\x24\xef\x5f\xac\xf8\x01\xdb\x22\xbe\x4c\xfa\x29\x86\x9a\xa0\xfa\x33\xb1\x12\xe2\xc1\xc5\x55\xf3\x35\x39\x91\x4d\x2f\xf2\xc3\x62\xa4\xf4\xbc\xf4\x90\x55\xb3\x02\xe2\xd3\x49\x36\xbf\xc7\x76\xfe\x96\x34\xac\x28\x99\xe0\x90\x5c\x1a\x58\x35\x07\x56\xa5\x20\x3f\x35\xc4\xad\x05\xfd\x9d\x94\x6e\x45\x71\xe6\xf2\x6e\x2e\x89\x71\xfc\x1d\xd5\x32\x2d\x27\xfb\x59\xdf\x4d\x18\x00\x69\xcd\xd9\x27\x5c\x7d\x3b\x2f\x9e\xe9\x7f\xf7\x20\x3a\x2e\xad\x45\xc3\x51\x82\xec\x95\x11\xab\x13\x01\x04\xba\xa8\xf5\x2d\xba\x9a\x7f\x1c\x5f\x70\xbd\xdf\xce\x1e\x59\x01\xf3\xf7\xb1\x8b\xfd\xad\xe8\x48\xe2\x96\xdf\xf4\x77\x9b\x1d\x6d\x07\xdc\xab\x0a\x88\x6a\x0b\xd5\x52\x13\x2c\x1c\xb8\xed\x00\x0d\xcf\xd3\x48\x8e\xfd\x42\xc5\xd8\x2f\x63\xf6\xf8\x9a\x57\x70\xc0\x48\x6c\x8c\x4e\x1a\x20\x1b\x5c\x74\xe8\xbf\xba\xf2\xd8\x8e\x91\x0b\x6e\x51\x4d\x75\x96\xce\x13\x2f\x80\xa4\x2a\xda\xa5\x67\x5d\x1c\x20\x8e\xbe\x5b\xb2\xc2\x9e\x3a\x23\x5f\xef\x25\x00\xdf\xb4\x7a\x16\x6c\x83\x32\x40\x20\x0d\xf4\x2f\xb9\xb5\x05\x58\x93\x84\x55\x5c\x1b\xc7\xd9\xea\x99\x93\x56\xaf\x98\xb8\x35\xbb\x07\x9f\x3b\xd7\xba\xc2\x98\x8b\x14\x5e\x9c\x20\x0c\x25\xc9\x50\x79\x5b\x11\x73\x27\xbe\x3b\xba\x41\xc1\xd7\x39\xfc\xf2\xa5\x97\xb4\xef\x79\x70\xec\x9b\xb1\xbb\xa9\x35\x5c\xa1\xcd\xcc\x5a\x47\x25\xa3\x6b\xf0\xca\x87\xef\x8d\x27\x68\xa8\x74\xf5\xc4\x1f\x2b\xe0\x1f\x92\x5c\xd0\x70\x24\xdd\xc4\xb6\x3d\xc1\x5a\xca\x83\x64\xcf\x55\x6f\x9f\x2d\xb8\xf7\x6f\xda\x80\xcf\x9d\x8a\xe1\x29\xe8\x64\x13\x54\xdf\x1b\x07\x91\xfb\xb1\x6d\xb8\x7e\x35\xca\x70\xee\x3c\xfe\x0c\xdc\x20\x76\x52\xcd\xdc\x0e\x18\x1c\xd7\x87\x91\x3d\xcb\xa1\xcc\x80\xde\xdf\x52\x68\xf9\xdc\xc8\x32\x28\x00\x3f\x88\xb1\xe8\xe5\xa4\xb3\xac\x9d\xa0\x0f\xef\x0e\xa2\x00\xae\x27\xb1\x12\x23\xa5\x7f\x39\x7c\xd3\x92\x21\xba\x8d\x57\x89\xad\xbb\x98\x42\x85\x5b\x33\xf2\x33\xf4\x83\x16\x4d\x9e\xd2\xad\xe5\xcb\x9f\x80\xc1\x7f\x8a\x09\xd4\xe3\xbd\x77\xcd\xfe\x78\x69\x1b\xd9\xf9\xa1\xf4\x0e\x59\xa6\x98\x87\x1d\xec\x32\x41\xef\x19\xc4\x3c\xe0\x1f\x8c\x29\xf8\x95\x8b\x09\xae\x69\xa8\x76\xfc\xdb\x4a\x6a\x6f\x7b\xa2\x08\x4c\x2d\x09\x2a\x0b\x2f\x48\x49\xc0\x9c\x23\x08\xa4\x4b\xe1\x3b\x5a\xdb\xb8\x89\x78\xd4\x0a\xbe\xcd\x63\x81\xd5\xeb\x9c\xcf\xd4\x4e\x27\xa7\x9c\x63\x27\x15\xc5\x22\xa8\xcd\x5a\x55\x4c\xe8\x3e\xf9\x24\xb2\xe1\xbd\xc6\x03\x02\xa4\xa7\xd8\x0c\x86\xdb\xf9\xdf\xee\xfb\x78\x56\xb7\x54\xfb\xa1\x8d\x93\x20\x54\x50\x2c\x85\xb7\xc5\xe9\x47\x8f\xb9\x97\x6d\xda\xcb\x1a\x73\x6d\xcd\xb4\xd5\xc0\x9e\xd8\x12\x50\x89\x7d\x1e\x5d\xc8\x5f\xd0\xe2\x27\x61\xe0\x3d\x7b\x0d\x1a\x06\xcc\x96\xca\xbc\xab\x58\xb1\xa7\x1b\xb7\x9d\x44\xaf\xe6\x4d\xb9\xf3\x7c\xc0\x7d\x3b\xe7\xf8\x51\xae\x0d\xd6\xe4\xa3\x50\x7b\x69\xb2\x07\x61\xdc\x77\x68\x08\xfa\x9a\x9c\xa3\x3e\x23\x1e\x8e\xbc\x68\xb6\x5c\x73\xdd\xc2\x2e\x8b\x9b\xa1\xef\x14\xfb\x52\x66\xc7\xba\xad\x76\xc0\x40\x03\x60\x6c\xc1\xd9\xbd\x4a\x10\xa7\xe5\xb6\x46\xf9\x68\x33\xc9\xab\x2d\x6a\xf5\x70\xbf\x1a\x7f\x7e\x53\x77\xa9\x11\x4a\xef\xbf\xf4\xf9\x77\xbc\x7d\x37\xfe\x80\x07\x47\x0e\x18\x1a\xe9\xf6\x4b\xb1\x63\x5a\xeb\xb0\xc2\xd0\xdf\x7d\xa9\xde\xda\x99\x10\x6e\x3f\x36\xfd\x79\xb8\x19\x31\xec\x44\xe1\x40\x86\x89\x70\x4b\x60\x24\xf6\xa7\xe2\xbb\xd0\xac\xa9\x8f\xcb\x48\x2b\x3c\xf3\xff\x38\xc6\x1a\x28\xc5\x5a\x7e\xc1\x7e\x09\x6f\x17\x1c\xde\xfc\x0b\x6a\xe3\xc4\xae\x41\x68\x4a\x47\x38\x21\x99\xf7\x15\xe9\xee\x27\x2b\xd2\xf7\x5b\xaf\x6a\xe3\xe0\x0f\x60\x7f\x8c\xf7\xa6\x9b\xd2\x82\x42\x54\xbc\x99\x44\x73\xfd\x4b\x52\x0c\x3e\xb0\x10\x3e\x81\xbd\x4c\x01\x06\xdb\x18\x60\x00\xb2\x55\x9f\xed\x33\x60\xba\x9c\x3d\x10\xac\xfc\xfa\xc8\x38\x5c\xf5\x57\x92\x7d\xd4\xdd\x7e\x3b\x81\xbd\x8d\x37\xfb\xa8\x1b\xd2\xdf\x0b\x19\x32\xc9\xbc\xcf\x7b\xfd\x5f\x0a\x2a\x4e\x6b\x16\x20\xf1\x91\x72\x6e\x05\x60\xff\xf9\x09\xf7\xf8";
    const additional_data = "\x17\x03\x03\x0f\x06";
    try aead.decrypt(allocator, &decrypted, nonce, payload, additional_data);

    const want = "\x0b\x00\x0e\xf1\x00\x00\x0e\xed\x00\x04\x60\x30\x82\x04\x5c\x30\x82\x03\x44\xa0\x03\x02\x01\x02\x02\x12\x03\x4d\xd1\x33\x2d\x2a\x42\xf3\x27\x01\xcc\x5e\x2e\x2c\x3c\x71\x0f\x14\x30\x0d\x06\x09\x2a\x86\x48\x86\xf7\x0d\x01\x01\x0b\x05\x00\x30\x32\x31\x0b\x30\x09\x06\x03\x55\x04\x06\x13\x02\x55\x53\x31\x16\x30\x14\x06\x03\x55\x04\x0a\x13\x0d\x4c\x65\x74\x27\x73\x20\x45\x6e\x63\x72\x79\x70\x74\x31\x0b\x30\x09\x06\x03\x55\x04\x03\x13\x02\x52\x33\x30\x1e\x17\x0d\x32\x32\x30\x32\x30\x35\x30\x38\x31\x31\x33\x31\x5a\x17\x0d\x32\x32\x30\x35\x30\x36\x30\x38\x31\x31\x33\x30\x5a\x30\x14\x31\x12\x30\x10\x06\x03\x55\x04\x03\x13\x09\x6e\x61\x72\x75\x68\x2e\x64\x65\x76\x30\x59\x30\x13\x06\x07\x2a\x86\x48\xce\x3d\x02\x01\x06\x08\x2a\x86\x48\xce\x3d\x03\x01\x07\x03\x42\x00\x04\x5b\x39\x17\xb1\x5d\xe8\x79\xc1\x8e\xde\x3a\xa4\x52\x41\xe5\x5d\xff\xc1\x8e\x7f\xbb\x14\x27\x8d\xca\xf0\x4e\x2a\x66\x3a\xd8\x6b\x9a\x50\xf4\x10\xd8\x32\xec\xb4\x61\x1f\xa4\x5e\x67\x95\x73\xbf\xa5\x09\x18\x71\x30\x68\x4a\xb6\x98\x36\x80\x35\x26\xe8\x74\xac\xa3\x82\x02\x53\x30\x82\x02\x4f\x30\x0e\x06\x03\x55\x1d\x0f\x01\x01\xff\x04\x04\x03\x02\x07\x80\x30\x1d\x06\x03\x55\x1d\x25\x04\x16\x30\x14\x06\x08\x2b\x06\x01\x05\x05\x07\x03\x01\x06\x08\x2b\x06\x01\x05\x05\x07\x03\x02\x30\x0c\x06\x03\x55\x1d\x13\x01\x01\xff\x04\x02\x30\x00\x30\x1d\x06\x03\x55\x1d\x0e\x04\x16\x04\x14\xbd\x34\x39\xb1\x5b\x09\xe3\x85\xe3\xe3\x43\x83\xf0\xb3\x51\x7a\xe5\xde\xa3\xa9\x30\x1f\x06\x03\x55\x1d\x23\x04\x18\x30\x16\x80\x14\x14\x2e\xb3\x17\xb7\x58\x56\xcb\xae\x50\x09\x40\xe6\x1f\xaf\x9d\x8b\x14\xc2\xc6\x30\x55\x06\x08\x2b\x06\x01\x05\x05\x07\x01\x01\x04\x49\x30\x47\x30\x21\x06\x08\x2b\x06\x01\x05\x05\x07\x30\x01\x86\x15\x68\x74\x74\x70\x3a\x2f\x2f\x72\x33\x2e\x6f\x2e\x6c\x65\x6e\x63\x72\x2e\x6f\x72\x67\x30\x22\x06\x08\x2b\x06\x01\x05\x05\x07\x30\x02\x86\x16\x68\x74\x74\x70\x3a\x2f\x2f\x72\x33\x2e\x69\x2e\x6c\x65\x6e\x63\x72\x2e\x6f\x72\x67\x2f\x30\x23\x06\x03\x55\x1d\x11\x04\x1c\x30\x1a\x82\x09\x6e\x61\x72\x75\x68\x2e\x64\x65\x76\x82\x0d\x77\x77\x77\x2e\x6e\x61\x72\x75\x68\x2e\x64\x65\x76\x30\x4c\x06\x03\x55\x1d\x20\x04\x45\x30\x43\x30\x08\x06\x06\x67\x81\x0c\x01\x02\x01\x30\x37\x06\x0b\x2b\x06\x01\x04\x01\x82\xdf\x13\x01\x01\x01\x30\x28\x30\x26\x06\x08\x2b\x06\x01\x05\x05\x07\x02\x01\x16\x1a\x68\x74\x74\x70\x3a\x2f\x2f\x63\x70\x73\x2e\x6c\x65\x74\x73\x65\x6e\x63\x72\x79\x70\x74\x2e\x6f\x72\x67\x30\x82\x01\x04\x06\x0a\x2b\x06\x01\x04\x01\xd6\x79\x02\x04\x02\x04\x81\xf5\x04\x81\xf2\x00\xf0\x00\x75\x00\x6f\x53\x76\xac\x31\xf0\x31\x19\xd8\x99\x00\xa4\x51\x15\xff\x77\x15\x1c\x11\xd9\x02\xc1\x00\x29\x06\x8d\xb2\x08\x9a\x37\xd9\x13\x00\x00\x01\x7e\xc9\x27\x1e\xbb\x00\x00\x04\x03\x00\x46\x30\x44\x02\x20\x27\xf3\x72\x2c\x3c\x6f\xd7\xf4\x7b\x81\x48\xce\xf7\x14\xa7\xf0\x3a\xd0\x96\xe7\x0a\x13\x2a\x47\xdf\xa1\x3d\x83\x72\x26\xea\xc3\x02\x20\x02\xdb\x0a\xef\x92\xea\x7c\xa6\x28\x24\xd9\xb1\x07\x8e\x0f\x45\xf4\x93\x20\x53\xd5\xd6\x28\x5e\xba\x99\x21\xd2\x64\x59\x2f\x5b\x00\x77\x00\x46\xa5\x55\xeb\x75\xfa\x91\x20\x30\xb5\xa2\x89\x69\xf4\xf3\x7d\x11\x2c\x41\x74\xbe\xfd\x49\xb8\x85\xab\xf2\xfc\x70\xfe\x6d\x47\x00\x00\x01\x7e\xc9\x27\x1e\xbb\x00\x00\x04\x03\x00\x48\x30\x46\x02\x21\x00\x99\x80\x2c\x91\x5e\x0e\xbc\xb2\x34\x90\xbe\xb9\x3b\x1a\x10\x5e\xf6\x9c\xb2\x98\xf3\xa0\x70\xa2\xf5\x5a\xda\x8e\xe9\x7d\xb4\x7f\x02\x21\x00\xc9\xed\x90\xf2\x15\x37\xa6\x9b\x76\x32\x5e\x7b\x42\xa4\x50\xc7\x57\x35\x5b\xf0\x48\x3f\x77\x08\x6b\xef\x72\x99\x90\xac\x5e\x46\x30\x0d\x06\x09\x2a\x86\x48\x86\xf7\x0d\x01\x01\x0b\x05\x00\x03\x82\x01\x01\x00\x85\x83\x87\x97\x43\x18\xcd\x56\x35\x1f\xf6\x63\x72\xb1\xd0\xdb\x21\x43\xe3\x03\x04\x5a\x63\xc9\xcf\x57\x22\xcc\x38\x03\x6c\x4f\xc5\x0f\x6b\x90\x1d\xf6\xb3\x1b\x31\xfe\x5e\x9c\xf5\x67\xd8\x31\xe1\x95\x8e\x1d\xdc\x03\x43\x19\x96\xc8\xa4\xa1\x05\x8f\xa9\x7d\xb3\xa9\xd7\xbf\xd8\x32\xf0\x32\x66\x1a\x12\x48\xd4\x1e\x12\xdb\xe9\x86\x4c\xad\x24\x78\xdd\xe9\x0b\xd0\x28\x43\xcf\x85\xdb\xcb\x09\x9b\xdf\xf5\x3d\xdd\x06\xc6\x48\x0e\x28\x25\x9b\x5a\x71\xb8\x76\x35\x9d\x37\xdb\xd2\xee\x72\x14\xb6\x71\x57\x05\x80\x86\x72\xa2\xae\xb7\xeb\x2a\x22\x87\x58\xe8\xee\x32\x62\x41\x3b\x8b\x36\x50\xc3\x6b\x99\x8b\xa9\xce\x64\x32\x24\xd8\x3c\x37\x0b\xc2\x23\x20\xb8\x5f\x94\x3f\xf6\xe7\x4f\x7d\x79\x8d\x9e\x8c\xec\x0f\x3d\xb3\xde\xce\x3b\xa7\xdc\xfe\x06\x21\x7f\x42\x6e\x6c\x74\xc2\x88\x84\x1f\xe6\xa8\x65\x51\xd0\x63\xa5\xfe\xdc\x8e\x89\x64\xce\x06\x88\x64\xd8\x3d\x93\x34\x9f\x3b\x3b\x1e\xd8\xd3\xa9\x40\xa9\x8e\x81\xbd\x0c\xe6\xbc\x19\x78\x38\xc9\x30\xf8\x41\xcc\xbc\x51\x1c\x25\x9d\x5b\x0c\x99\xf0\x90\x4b\x8d\x59\x6e\xa1\xf4\xc0\xa7\x4d\x00\x00\x00\x05\x1a\x30\x82\x05\x16\x30\x82\x02\xfe\xa0\x03\x02\x01\x02\x02\x11\x00\x91\x2b\x08\x4a\xcf\x0c\x18\xa7\x53\xf6\xd6\x2e\x25\xa7\x5f\x5a\x30\x0d\x06\x09\x2a\x86\x48\x86\xf7\x0d\x01\x01\x0b\x05\x00\x30\x4f\x31\x0b\x30\x09\x06\x03\x55\x04\x06\x13\x02\x55\x53\x31\x29\x30\x27\x06\x03\x55\x04\x0a\x13\x20\x49\x6e\x74\x65\x72\x6e\x65\x74\x20\x53\x65\x63\x75\x72\x69\x74\x79\x20\x52\x65\x73\x65\x61\x72\x63\x68\x20\x47\x72\x6f\x75\x70\x31\x15\x30\x13\x06\x03\x55\x04\x03\x13\x0c\x49\x53\x52\x47\x20\x52\x6f\x6f\x74\x20\x58\x31\x30\x1e\x17\x0d\x32\x30\x30\x39\x30\x34\x30\x30\x30\x30\x30\x30\x5a\x17\x0d\x32\x35\x30\x39\x31\x35\x31\x36\x30\x30\x30\x30\x5a\x30\x32\x31\x0b\x30\x09\x06\x03\x55\x04\x06\x13\x02\x55\x53\x31\x16\x30\x14\x06\x03\x55\x04\x0a\x13\x0d\x4c\x65\x74\x27\x73\x20\x45\x6e\x63\x72\x79\x70\x74\x31\x0b\x30\x09\x06\x03\x55\x04\x03\x13\x02\x52\x33\x30\x82\x01\x22\x30\x0d\x06\x09\x2a\x86\x48\x86\xf7\x0d\x01\x01\x01\x05\x00\x03\x82\x01\x0f\x00\x30\x82\x01\x0a\x02\x82\x01\x01\x00\xbb\x02\x15\x28\xcc\xf6\xa0\x94\xd3\x0f\x12\xec\x8d\x55\x92\xc3\xf8\x82\xf1\x99\xa6\x7a\x42\x88\xa7\x5d\x26\xaa\xb5\x2b\xb9\xc5\x4c\xb1\xaf\x8e\x6b\xf9\x75\xc8\xa3\xd7\x0f\x47\x94\x14\x55\x35\x57\x8c\x9e\xa8\xa2\x39\x19\xf5\x82\x3c\x42\xa9\x4e\x6e\xf5\x3b\xc3\x2e\xdb\x8d\xc0\xb0\x5c\xf3\x59\x38\xe7\xed\xcf\x69\xf0\x5a\x0b\x1b\xbe\xc0\x94\x24\x25\x87\xfa\x37\x71\xb3\x13\xe7\x1c\xac\xe1\x9b\xef\xdb\xe4\x3b\x45\x52\x45\x96\xa9\xc1\x53\xce\x34\xc8\x52\xee\xb5\xae\xed\x8f\xde\x60\x70\xe2\xa5\x54\xab\xb6\x6d\x0e\x97\xa5\x40\x34\x6b\x2b\xd3\xbc\x66\xeb\x66\x34\x7c\xfa\x6b\x8b\x8f\x57\x29\x99\xf8\x30\x17\x5d\xba\x72\x6f\xfb\x81\xc5\xad\xd2\x86\x58\x3d\x17\xc7\xe7\x09\xbb\xf1\x2b\xf7\x86\xdc\xc1\xda\x71\x5d\xd4\x46\xe3\xcc\xad\x25\xc1\x88\xbc\x60\x67\x75\x66\xb3\xf1\x18\xf7\xa2\x5c\xe6\x53\xff\x3a\x88\xb6\x47\xa5\xff\x13\x18\xea\x98\x09\x77\x3f\x9d\x53\xf9\xcf\x01\xe5\xf5\xa6\x70\x17\x14\xaf\x63\xa4\xff\x99\xb3\x93\x9d\xdc\x53\xa7\x06\xfe\x48\x85\x1d\xa1\x69\xae\x25\x75\xbb\x13\xcc\x52\x03\xf5\xed\x51\xa1\x8b\xdb\x15\x02\x03\x01\x00\x01\xa3\x82\x01\x08\x30\x82\x01\x04\x30\x0e\x06\x03\x55\x1d\x0f\x01\x01\xff\x04\x04\x03\x02\x01\x86\x30\x1d\x06\x03\x55\x1d\x25\x04\x16\x30\x14\x06\x08\x2b\x06\x01\x05\x05\x07\x03\x02\x06\x08\x2b\x06\x01\x05\x05\x07\x03\x01\x30\x12\x06\x03\x55\x1d\x13\x01\x01\xff\x04\x08\x30\x06\x01\x01\xff\x02\x01\x00\x30\x1d\x06\x03\x55\x1d\x0e\x04\x16\x04\x14\x14\x2e\xb3\x17\xb7\x58\x56\xcb\xae\x50\x09\x40\xe6\x1f\xaf\x9d\x8b\x14\xc2\xc6\x30\x1f\x06\x03\x55\x1d\x23\x04\x18\x30\x16\x80\x14\x79\xb4\x59\xe6\x7b\xb6\xe5\xe4\x01\x73\x80\x08\x88\xc8\x1a\x58\xf6\xe9\x9b\x6e\x30\x32\x06\x08\x2b\x06\x01\x05\x05\x07\x01\x01\x04\x26\x30\x24\x30\x22\x06\x08\x2b\x06\x01\x05\x05\x07\x30\x02\x86\x16\x68\x74\x74\x70\x3a\x2f\x2f\x78\x31\x2e\x69\x2e\x6c\x65\x6e\x63\x72\x2e\x6f\x72\x67\x2f\x30\x27\x06\x03\x55\x1d\x1f\x04\x20\x30\x1e\x30\x1c\xa0\x1a\xa0\x18\x86\x16\x68\x74\x74\x70\x3a\x2f\x2f\x78\x31\x2e\x63\x2e\x6c\x65\x6e\x63\x72\x2e\x6f\x72\x67\x2f\x30\x22\x06\x03\x55\x1d\x20\x04\x1b\x30\x19\x30\x08\x06\x06\x67\x81\x0c\x01\x02\x01\x30\x0d\x06\x0b\x2b\x06\x01\x04\x01\x82\xdf\x13\x01\x01\x01\x30\x0d\x06\x09\x2a\x86\x48\x86\xf7\x0d\x01\x01\x0b\x05\x00\x03\x82\x02\x01\x00\x85\xca\x4e\x47\x3e\xa3\xf7\x85\x44\x85\xbc\xd5\x67\x78\xb2\x98\x63\xad\x75\x4d\x1e\x96\x3d\x33\x65\x72\x54\x2d\x81\xa0\xea\xc3\xed\xf8\x20\xbf\x5f\xcc\xb7\x70\x00\xb7\x6e\x3b\xf6\x5e\x94\xde\xe4\x20\x9f\xa6\xef\x8b\xb2\x03\xe7\xa2\xb5\x16\x3c\x91\xce\xb4\xed\x39\x02\xe7\x7c\x25\x8a\x47\xe6\x65\x6e\x3f\x46\xf4\xd9\xf0\xce\x94\x2b\xee\x54\xce\x12\xbc\x8c\x27\x4b\xb8\xc1\x98\x2f\xa2\xaf\xcd\x71\x91\x4a\x08\xb7\xc8\xb8\x23\x7b\x04\x2d\x08\xf9\x08\x57\x3e\x83\xd9\x04\x33\x0a\x47\x21\x78\x09\x82\x27\xc3\x2a\xc8\x9b\xb9\xce\x5c\xf2\x64\xc8\xc0\xbe\x79\xc0\x4f\x8e\x6d\x44\x0c\x5e\x92\xbb\x2e\xf7\x8b\x10\xe1\xe8\x1d\x44\x29\xdb\x59\x20\xed\x63\xb9\x21\xf8\x12\x26\x94\x93\x57\xa0\x1d\x65\x04\xc1\x0a\x22\xae\x10\x0d\x43\x97\xa1\x18\x1f\x7e\xe0\xe0\x86\x37\xb5\x5a\xb1\xbd\x30\xbf\x87\x6e\x2b\x2a\xff\x21\x4e\x1b\x05\xc3\xf5\x18\x97\xf0\x5e\xac\xc3\xa5\xb8\x6a\xf0\x2e\xbc\x3b\x33\xb9\xee\x4b\xde\xcc\xfc\xe4\xaf\x84\x0b\x86\x3f\xc0\x55\x43\x36\xf6\x68\xe1\x36\x17\x6a\x8e\x99\xd1\xff\xa5\x40\xa7\x34\xb7\xc0\xd0\x63\x39\x35\x39\x75\x6e\xf2\xba\x76\xc8\x93\x02\xe9\xa9\x4b\x6c\x17\xce\x0c\x02\xd9\xbd\x81\xfb\x9f\xb7\x68\xd4\x06\x65\xb3\x82\x3d\x77\x53\xf8\x8e\x79\x03\xad\x0a\x31\x07\x75\x2a\x43\xd8\x55\x97\x72\xc4\x29\x0e\xf7\xc4\x5d\x4e\xc8\xae\x46\x84\x30\xd7\xf2\x85\x5f\x18\xa1\x79\xbb\xe7\x5e\x70\x8b\x07\xe1\x86\x93\xc3\xb9\x8f\xdc\x61\x71\x25\x2a\xaf\xdf\xed\x25\x50\x52\x68\x8b\x92\xdc\xe5\xd6\xb5\xe3\xda\x7d\xd0\x87\x6c\x84\x21\x31\xae\x82\xf5\xfb\xb9\xab\xc8\x89\x17\x3d\xe1\x4c\xe5\x38\x0e\xf6\xbd\x2b\xbd\x96\x81\x14\xeb\xd5\xdb\x3d\x20\xa7\x7e\x59\xd3\xe2\xf8\x58\xf9\x5b\xb8\x48\xcd\xfe\x5c\x4f\x16\x29\xfe\x1e\x55\x23\xaf\xc8\x11\xb0\x8d\xea\x7c\x93\x90\x17\x2f\xfd\xac\xa2\x09\x47\x46\x3f\xf0\xe9\xb0\xb7\xff\x28\x4d\x68\x32\xd6\x67\x5e\x1e\x69\xa3\x93\xb8\xf5\x9d\x8b\x2f\x0b\xd2\x52\x43\xa6\x6f\x32\x57\x65\x4d\x32\x81\xdf\x38\x53\x85\x5d\x7e\x5d\x66\x29\xea\xb8\xdd\xe4\x95\xb5\xcd\xb5\x56\x12\x42\xcd\xc4\x4e\xc6\x25\x38\x44\x50\x6d\xec\xce\x00\x55\x18\xfe\xe9\x49\x64\xd4\x4e\xca\x97\x9c\xb4\x5b\xc0\x73\xa8\xab\xb8\x47\xc2\x00\x00\x00\x05\x64\x30\x82\x05\x60\x30\x82\x04\x48\xa0\x03\x02\x01\x02\x02\x10\x40\x01\x77\x21\x37\xd4\xe9\x42\xb8\xee\x76\xaa\x3c\x64\x0a\xb7\x30\x0d\x06\x09\x2a\x86\x48\x86\xf7\x0d\x01\x01\x0b\x05\x00\x30\x3f\x31\x24\x30\x22\x06\x03\x55\x04\x0a\x13\x1b\x44\x69\x67\x69\x74\x61\x6c\x20\x53\x69\x67\x6e\x61\x74\x75\x72\x65\x20\x54\x72\x75\x73\x74\x20\x43\x6f\x2e\x31\x17\x30\x15\x06\x03\x55\x04\x03\x13\x0e\x44\x53\x54\x20\x52\x6f\x6f\x74\x20\x43\x41\x20\x58\x33\x30\x1e\x17\x0d\x32\x31\x30\x31\x32\x30\x31\x39\x31\x34\x30\x33\x5a\x17\x0d\x32\x34\x30\x39\x33\x30\x31\x38\x31\x34\x30\x33\x5a\x30\x4f\x31\x0b\x30\x09\x06\x03\x55\x04\x06\x13\x02\x55\x53\x31\x29\x30\x27\x06\x03\x55\x04\x0a\x13\x20\x49\x6e\x74\x65\x72\x6e\x65\x74\x20\x53\x65\x63\x75\x72\x69\x74\x79\x20\x52\x65\x73\x65\x61\x72\x63\x68\x20\x47\x72\x6f\x75\x70\x31\x15\x30\x13\x06\x03\x55\x04\x03\x13\x0c\x49\x53\x52\x47\x20\x52\x6f\x6f\x74\x20\x58\x31\x30\x82\x02\x22\x30\x0d\x06\x09\x2a\x86\x48\x86\xf7\x0d\x01\x01\x01\x05\x00\x03\x82\x02\x0f\x00\x30\x82\x02\x0a\x02\x82\x02\x01\x00\xad\xe8\x24\x73\xf4\x14\x37\xf3\x9b\x9e\x2b\x57\x28\x1c\x87\xbe\xdc\xb7\xdf\x38\x90\x8c\x6e\x3c\xe6\x57\xa0\x78\xf7\x75\xc2\xa2\xfe\xf5\x6a\x6e\xf6\x00\x4f\x28\xdb\xde\x68\x86\x6c\x44\x93\xb6\xb1\x63\xfd\x14\x12\x6b\xbf\x1f\xd2\xea\x31\x9b\x21\x7e\xd1\x33\x3c\xba\x48\xf5\xdd\x79\xdf\xb3\xb8\xff\x12\xf1\x21\x9a\x4b\xc1\x8a\x86\x71\x69\x4a\x66\x66\x6c\x8f\x7e\x3c\x70\xbf\xad\x29\x22\x06\xf3\xe4\xc0\xe6\x80\xae\xe2\x4b\x8f\xb7\x99\x7e\x94\x03\x9f\xd3\x47\x97\x7c\x99\x48\x23\x53\xe8\x38\xae\x4f\x0a\x6f\x83\x2e\xd1\x49\x57\x8c\x80\x74\xb6\xda\x2f\xd0\x38\x8d\x7b\x03\x70\x21\x1b\x75\xf2\x30\x3c\xfa\x8f\xae\xdd\xda\x63\xab\xeb\x16\x4f\xc2\x8e\x11\x4b\x7e\xcf\x0b\xe8\xff\xb5\x77\x2e\xf4\xb2\x7b\x4a\xe0\x4c\x12\x25\x0c\x70\x8d\x03\x29\xa0\xe1\x53\x24\xec\x13\xd9\xee\x19\xbf\x10\xb3\x4a\x8c\x3f\x89\xa3\x61\x51\xde\xac\x87\x07\x94\xf4\x63\x71\xec\x2e\xe2\x6f\x5b\x98\x81\xe1\x89\x5c\x34\x79\x6c\x76\xef\x3b\x90\x62\x79\xe6\xdb\xa4\x9a\x2f\x26\xc5\xd0\x10\xe1\x0e\xde\xd9\x10\x8e\x16\xfb\xb7\xf7\xa8\xf7\xc7\xe5\x02\x07\x98\x8f\x36\x08\x95\xe7\xe2\x37\x96\x0d\x36\x75\x9e\xfb\x0e\x72\xb1\x1d\x9b\xbc\x03\xf9\x49\x05\xd8\x81\xdd\x05\xb4\x2a\xd6\x41\xe9\xac\x01\x76\x95\x0a\x0f\xd8\xdf\xd5\xbd\x12\x1f\x35\x2f\x28\x17\x6c\xd2\x98\xc1\xa8\x09\x64\x77\x6e\x47\x37\xba\xce\xac\x59\x5e\x68\x9d\x7f\x72\xd6\x89\xc5\x06\x41\x29\x3e\x59\x3e\xdd\x26\xf5\x24\xc9\x11\xa7\x5a\xa3\x4c\x40\x1f\x46\xa1\x99\xb5\xa7\x3a\x51\x6e\x86\x3b\x9e\x7d\x72\xa7\x12\x05\x78\x59\xed\x3e\x51\x78\x15\x0b\x03\x8f\x8d\xd0\x2f\x05\xb2\x3e\x7b\x4a\x1c\x4b\x73\x05\x12\xfc\xc6\xea\xe0\x50\x13\x7c\x43\x93\x74\xb3\xca\x74\xe7\x8e\x1f\x01\x08\xd0\x30\xd4\x5b\x71\x36\xb4\x07\xba\xc1\x30\x30\x5c\x48\xb7\x82\x3b\x98\xa6\x7d\x60\x8a\xa2\xa3\x29\x82\xcc\xba\xbd\x83\x04\x1b\xa2\x83\x03\x41\xa1\xd6\x05\xf1\x1b\xc2\xb6\xf0\xa8\x7c\x86\x3b\x46\xa8\x48\x2a\x88\xdc\x76\x9a\x76\xbf\x1f\x6a\xa5\x3d\x19\x8f\xeb\x38\xf3\x64\xde\xc8\x2b\x0d\x0a\x28\xff\xf7\xdb\xe2\x15\x42\xd4\x22\xd0\x27\x5d\xe1\x79\xfe\x18\xe7\x70\x88\xad\x4e\xe6\xd9\x8b\x3a\xc6\xdd\x27\x51\x6e\xff\xbc\x64\xf5\x33\x43\x4f\x02\x03\x01\x00\x01\xa3\x82\x01\x46\x30\x82\x01\x42\x30\x0f\x06\x03\x55\x1d\x13\x01\x01\xff\x04\x05\x30\x03\x01\x01\xff\x30\x0e\x06\x03\x55\x1d\x0f\x01\x01\xff\x04\x04\x03\x02\x01\x06\x30\x4b\x06\x08\x2b\x06\x01\x05\x05\x07\x01\x01\x04\x3f\x30\x3d\x30\x3b\x06\x08\x2b\x06\x01\x05\x05\x07\x30\x02\x86\x2f\x68\x74\x74\x70\x3a\x2f\x2f\x61\x70\x70\x73\x2e\x69\x64\x65\x6e\x74\x72\x75\x73\x74\x2e\x63\x6f\x6d\x2f\x72\x6f\x6f\x74\x73\x2f\x64\x73\x74\x72\x6f\x6f\x74\x63\x61\x78\x33\x2e\x70\x37\x63\x30\x1f\x06\x03\x55\x1d\x23\x04\x18\x30\x16\x80\x14\xc4\xa7\xb1\xa4\x7b\x2c\x71\xfa\xdb\xe1\x4b\x90\x75\xff\xc4\x15\x60\x85\x89\x10\x30\x54\x06\x03\x55\x1d\x20\x04\x4d\x30\x4b\x30\x08\x06\x06\x67\x81\x0c\x01\x02\x01\x30\x3f\x06\x0b\x2b\x06\x01\x04\x01\x82\xdf\x13\x01\x01\x01\x30\x30\x30\x2e\x06\x08\x2b\x06\x01\x05\x05\x07\x02\x01\x16\x22\x68\x74\x74\x70\x3a\x2f\x2f\x63\x70\x73\x2e\x72\x6f\x6f\x74\x2d\x78\x31\x2e\x6c\x65\x74\x73\x65\x6e\x63\x72\x79\x70\x74\x2e\x6f\x72\x67\x30\x3c\x06\x03\x55\x1d\x1f\x04\x35\x30\x33\x30\x31\xa0\x2f\xa0\x2d\x86\x2b\x68\x74\x74\x70\x3a\x2f\x2f\x63\x72\x6c\x2e\x69\x64\x65\x6e\x74\x72\x75\x73\x74\x2e\x63\x6f\x6d\x2f\x44\x53\x54\x52\x4f\x4f\x54\x43\x41\x58\x33\x43\x52\x4c\x2e\x63\x72\x6c\x30\x1d\x06\x03\x55\x1d\x0e\x04\x16\x04\x14\x79\xb4\x59\xe6\x7b\xb6\xe5\xe4\x01\x73\x80\x08\x88\xc8\x1a\x58\xf6\xe9\x9b\x6e\x30\x0d\x06\x09\x2a\x86\x48\x86\xf7\x0d\x01\x01\x0b\x05\x00\x03\x82\x01\x01\x00\x0a\x73\x00\x6c\x96\x6e\xff\x0e\x52\xd0\xae\xdd\x8c\xe7\x5a\x06\xad\x2f\xa8\xe3\x8f\xbf\xc9\x0a\x03\x15\x50\xc2\xe5\x6c\x42\xbb\x6f\x9b\xf4\xb4\x4f\xc2\x44\x88\x08\x75\xcc\xeb\x07\x9b\x14\x62\x6e\x78\xde\xec\x27\xba\x39\x5c\xf5\xa2\xa1\x6e\x56\x94\x70\x10\x53\xb1\xbb\xe4\xaf\xd0\xa2\xc3\x2b\x01\xd4\x96\xf4\xc5\x20\x35\x33\xf9\xd8\x61\x36\xe0\x71\x8d\xb4\xb8\xb5\xaa\x82\x45\x95\xc0\xf2\xa9\x23\x28\xe7\xd6\xa1\xcb\x67\x08\xda\xa0\x43\x2c\xaa\x1b\x93\x1f\xc9\xde\xf5\xab\x69\x5d\x13\xf5\x5b\x86\x58\x22\xca\x4d\x55\xe4\x70\x67\x6d\xc2\x57\xc5\x46\x39\x41\xcf\x8a\x58\x83\x58\x6d\x99\xfe\x57\xe8\x36\x0e\xf0\x0e\x23\xaa\xfd\x88\x97\xd0\xe3\x5c\x0e\x94\x49\xb5\xb5\x17\x35\xd2\x2e\xbf\x4e\x85\xef\x18\xe0\x85\x92\xeb\x06\x3b\x6c\x29\x23\x09\x60\xdc\x45\x02\x4c\x12\x18\x3b\xe9\xfb\x0e\xde\xdc\x44\xf8\x58\x98\xae\xea\xbd\x45\x45\xa1\x88\x5d\x66\xca\xfe\x10\xe9\x6f\x82\xc8\x11\x42\x0d\xfb\xe9\xec\xe3\x86\x00\xde\x9d\x10\xe3\x38\xfa\xa4\x7d\xb1\xd8\xe8\x49\x82\x84\x06\x9b\x2b\xe8\x6b\x4f\x01\x0c\x38\x77\x2e\xf9\xdd\xe7\x39\x00\x00\x16";
    try testing.expectEqualSlices(u8, want, decrypted.items);
}
